<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="52:SenseAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x403f7888"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x403c4e68"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x403c4e68"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x404ea2b8"/></to>
    </wire>
    <wire loc="53:SenseAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40403bd8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40417d50"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40417d50"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405133d8"/></to>
    </wire>
    <wire loc="54:SenseAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40405330"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40527660"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.1/tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40527660"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x4052e670"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:SenseAppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x4040c9c8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40631b58"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.1.1/tos/platforms/micaz/DemoSensorC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40631b58"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x4090a9a8"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40410aa0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4091ee80"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.1/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40410aa0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4052cea0"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x404ea650"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x4034eed8"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4034eed8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x403d4df8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x404eac18"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4040fae8"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4040fae8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40415da0"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4050d030"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x40410aa0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x4041cb20"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4063ed70"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x4041c3c0"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x404f6880"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x4041a620"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x404f64d0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4041a218"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405296e0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4041a218"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x404149c0"/></to>
    </wire>
    <wire loc="23:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x404149c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4041f9c0"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x40414d90"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x4041cb20"/></to>
    </wire>
    <wire loc="25:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x40423ef8"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x40430210"/></to>
    </wire>
    <wire loc="132:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x40430210"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x404727d0"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x404268f8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x40414d90"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x404454b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404c46c0"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x40437a28"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40488790"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40488790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407f3010"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x404440a0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40496410"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40496410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4081d228"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x40448210"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4049ad68"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x4049ad68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40867c08"/></to>
    </wire>
    <wire loc="134:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x4042f670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4047bac8"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4047bac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4074d010"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x40441ce8"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4049ca80"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x4049ca80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408507f8"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x4042ea98"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40477b00"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40477b00"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4077bde8"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x40431210"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404846b0"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x404846b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407b3d70"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x4043f8e0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x404924f0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x404924f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407ee010"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x40443ea8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40494170"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x40494170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408320b0"/></to>
    </wire>
    <wire loc="129:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x404292f0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40474b80"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40474b80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407409e8"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x4042c8e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4047f7d0"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x4047f7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40772c08"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x404390a0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40482330"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x40482330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407aec08"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x4043d750"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40490170"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x40490170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407e9010"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x404460a0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x404a4ac8"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x404a4ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40862a88"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x4044d590"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404d4e98"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x4043cc08"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40497090"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40497090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40821de0"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x404727d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4073b9e8"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x40434830"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4047d4f0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x4047d4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40784a88"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x4044e0c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404cee98"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x40433ce8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x404853d8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x404853d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407b6938"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x404364b0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40493170"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x40493170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407f29e8"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x40444a98"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40496d68"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x40496d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4081cc08"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x40448c08"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x404a5790"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x404a5790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408656c0"/></to>
    </wire>
    <wire loc="135:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x4042e0a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4047a4f0"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4047a4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4074c9e8"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x4042d4b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x404804f0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x404804f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407757f8"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x40431c08"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40483030"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40483030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407b17f8"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x4043e2f0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40492e48"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x40492e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407ed9e8"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x404428e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40494ac8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x40494ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40831a88"/></to>
    </wire>
    <wire loc="130:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x40429ce8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404734f0"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x404734f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4073e538"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x404352f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x4047e170"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x4047e170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407876c0"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x40439a98"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40482c88"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x40482c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407ac6c0"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x40446a98"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x404a34f0"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x404a34f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40860538"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x40438ea8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40489dc8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40489dc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407dd538"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x4043b670"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404979e8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x404979e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4081f7f8"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x40440750"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4049a410"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x4049a410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4084e228"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x4044c010"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404d06c0"/></to>
    </wire>
    <wire loc="133:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x40430c08"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4047b170"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x4047b170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4074f538"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x404332f0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4047de48"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4047de48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40782538"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x404412f0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4049c128"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x4049c128"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40856de8"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x40432750"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40485d30"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin1" scoped="" ref="0x40485d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407b43b0"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x40436ea8"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40493ac8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40493ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407f0538"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x404434b0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40495790"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x40495790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4081a6c0"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x40447670"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x404a4170"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x404a4170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x408630b0"/></to>
    </wire>
    <wire loc="128:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x4041e8d8"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40474228"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x40474228"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40741010"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x4042dea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40480e48"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin2" scoped="" ref="0x40480e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40773228"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x4043a670"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40483988"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin4" scoped="" ref="0x40483988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407af228"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x4043ece8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x404917d0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin6" scoped="" ref="0x404917d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407eb538"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x4044eab8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x404ca6c0"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x4043c210"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x404986f8"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin0" scoped="" ref="0x404986f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40822418"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x404384b0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4048c6b0"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin7" scoped="" ref="0x4048c6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407c20b0"/></to>
    </wire>
    <wire loc="131:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x40428750"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40473e48"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin3" scoped="" ref="0x40473e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4073c010"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x40435d68"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4047eac8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <from><interface-ref name="Pin5" scoped="" ref="0x4047eac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x407850b0"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x40354600"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x403d3670"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x403d8310"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x40349c28"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x403e7e88"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x405a5f20"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x405296e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40513090"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405120b0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x4051d8e8"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x4051d8e8"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x40429ce8"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x40512a98"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x4051c308"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x4051c308"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x404292f0"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405114a0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x4051cd10"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x4051cd10"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x4041e8d8"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.1/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x4052e670"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40536698"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40536698"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x405f1600"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4052cea0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40532dd8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x4053e710"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x4061d348"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40532dd8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405d3418"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x40610968"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4053d720"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x405e7a48"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x40544610"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x40544610"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x405d3850"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4061dce0"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x40543010"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x40543010"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x405d1340"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x405d1340"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x408cd6f8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x405d3418"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408d0858"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x405d3850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x408d0c90"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x408cc8b8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40594540"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40594540"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4059a5f8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x408c9a78"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40591878"/></to>
    </wire>
    <wire loc="84:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40591878"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x405988d0"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x408c84a0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40590418"/></to>
    </wire>
    <wire loc="85:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40590418"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40597418"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x408e8e98"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x4059d010"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x4059d010"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x405a4398"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x405f44d8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40354600"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x4061fbc8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40354600"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="38:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x4090a9a8"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x409081d0"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x409081d0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40639e88"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="40:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40908d58"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40715638"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40636280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40908d58"/></to>
    </wire>
    <wire loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40642b68"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x40645b38"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x4063e100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40907310"/></to>
    </wire>
    <wire loc="30:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40639e88"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x406eb750"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x406372f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x406fd390"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x407190a8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40642b68"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406fc8b8"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40636280"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40712470"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x406ea3d8"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406fc040"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4064d540"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4064d540"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406566a8"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x4064a870"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40656c30"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40645b38"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40675cf0"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40675cf0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4091a358"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x406d63e8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x4063e100"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x40660498"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x4063d9f8"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x4063d9f8"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x40677738"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40657968"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x4041c3c0"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x406e8bb0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x40656218"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x406e7328"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x406d7890"/></to>
    </wire>
    <wire loc="97:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x406d7890"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4091aea0"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40674c18"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x403e28f8"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x406d7488"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x4091aa98"/></to>
    </wire>
    <wire loc="98:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x406d7f28"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40919580"/></to>
    </wire>
    <wire loc="99:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40919a40"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x406d63e8"/></to>
    </wire>
    <wire loc="101:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40919e68"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x4091c1d0"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x40917080"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40354600"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40939578"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x406e8bb0"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x40939970"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x406e7010"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40939c88"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x406e7328"/></to>
    </wire>
    <wire loc="75:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x409383f0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x406e79c0"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x40706010"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40354600"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="SenseC" loc="47:SenseC.nc">
      <documentation loc="36:SenseC.nc">
        <short>&#10; &#10; Sensing demo application.</short>
        <long>&#10; &#10; Sensing demo application. See README.txt file in this directory for usage&#10; instructions and have a look at tinyos-2.x/doc/html/tutorial/lesson5.html&#10; for a general tutorial on sensing in TinyOS.&#10;&#10; @author Jan Hauer&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MainC" loc="45:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <documentation loc="1:/opt/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009/07/01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <documentation loc="1:/opt/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009/07/01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/opt/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009/07/01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="18:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="12:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:37">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:36">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:39">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:43">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:46">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:45">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:44">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:47">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="45:/opt/tinyos-2.1.1/tos/platforms/iris/MeasureClockC.nc">
      <documentation loc="36:/opt/tinyos-2.1.1/tos/platforms/iris/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10; @author Janos Sallai&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/opt/tinyos-2.1.1/tos/system/RealMainP.nc" safe="">
      <documentation loc="38:/opt/tinyos-2.1.1/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/opt/tinyos-2.1.1/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="63:/opt/tinyos-2.1.1/tos/chips/atm1281/McuSleepC.nc" safe="">
      <documentation loc="48:/opt/tinyos-2.1.1/tos/chips/atm1281/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.5 2009/02/04 19:31:43 sallai Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10; @date   October 30, 2007&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="34:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/opt/tinyos-2.1.1/tos/system/LedsP.nc" safe="">
      <documentation loc="24:/opt/tinyos-2.1.1/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/opt/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009/07/01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SenseAppC.TimerMilliC" loc="36(SenseAppC.TimerMilliC):/opt/tinyos-2.1.1/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.1.1/tos/system/TimerMilliP.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="47(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="34:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP" loc="47(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP):/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <documentation loc="34:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm1281AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40542b68"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm1281Timer2AsyncC" loc="66:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <documentation loc="55:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm1281Timer2AsyncP" loc="58:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc" safe="">
      <documentation loc="45:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
        <short>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega1281 timer 2 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 2 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SenseAppC.Sensor" loc="19(SenseAppC.Sensor):/opt/tinyos-2.1.1/tos/platforms/micaz/DemoSensorC.nc">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/platforms/micaz/DemoSensorC.nc">
        <short>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.</short>
        <long>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.&#10;&#10; @author Philip Levis&#10; @authod David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SenseAppC.Sensor.DemoChannel" loc="29(SenseAppC.Sensor.DemoChannel):/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc">
      <documentation loc="21:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SenseAppC.Sensor.DemoChannel.AdcReadClientC" loc="21(SenseAppC.Sensor.DemoChannel.AdcReadClientC):/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="84:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc" safe="">
      <documentation loc="73:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega1281 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega1281 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="27:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="58:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="49:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega1281 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega1281 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="79(Atm128AdcC.AdcArbiter):/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="59:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="32(Atm128AdcC.AdcArbiter.Queue):/opt/tinyos-2.1.1/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="57(Atm128AdcC.PM):/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="48(Atm128AdcC.PM.PowerManager):/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="VoltageP" loc="28:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageP.nc">
      <documentation loc="21:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageP.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x4044bdc8" loc="31:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40452010" loc="31:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40452228" loc="31:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x404542c8" loc="32:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x404544f0" loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40454718" loc="34:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40454908" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x404a0790" loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x404a09b8" loc="34:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x404a0be0" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x404a0dd0" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.1.1/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="34:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40542b68" loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40542b68"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40542d28" loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm1281AlarmAsyncP" loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="34:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega1281's 8-bit timer 2&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 2 overflow.&#10;&#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 2&#10; and never lets timer 2 overflow.&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40547ec0" loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40547ec0"/></type-var>
        </typedef>
        <constant name="divider" ref="0x405520d0" loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
          <component-ref qname="Atm1281AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x405dd328" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x405dd328"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x405f3830" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x405f3830"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x405f3a10" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4061b258" loc="35:/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4061b258"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="DemoSensorC" loc="19:/opt/tinyos-2.1.1/tos/platforms/micaz/DemoSensorC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/platforms/micaz/DemoSensorC.nc">
        <short>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.</short>
        <long>&#10; The micaZ doesn't have any built-in sensors - the DemoSensor returns&#10; a constant value of 0xbeef, or just reads the ground value for the&#10; stream sensor.&#10;&#10; @author Philip Levis&#10; @authod David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageC" loc="29:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc" abstract="">
      <documentation loc="21:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="21:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="79:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="59:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x40679850" loc="79:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="32:/opt/tinyos-2.1.1/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x4069fe08" loc="32:/opt/tinyos-2.1.1/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x406b0528" loc="52:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="57:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="48:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x406ecbb0" loc="23:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x406ecbb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x403f7888" loc="50:SenseC.nc">
      <component-ref qname="SenseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x403f7888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x403f7a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x4040c9c8" loc="53:SenseC.nc">
      <component-ref qname="SenseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4040c9c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40404010"/>
        <function-ref name="readDone" scoped="" ref="0x40404268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40403bd8" loc="51:SenseC.nc">
      <component-ref qname="SenseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40403bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40403db0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40403e90"/>
        <function-ref name="led1On" scoped="" ref="0x403f6010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x403f60f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x403f61d0"/>
        <function-ref name="get" scoped="" ref="0x403f62b0"/>
        <function-ref name="led1Off" scoped="" ref="0x403f6390"/>
        <function-ref name="led2Off" scoped="" ref="0x403f6710"/>
        <function-ref name="set" scoped="" ref="0x403f6470"/>
        <function-ref name="led0On" scoped="" ref="0x403f6550"/>
        <function-ref name="led2On" scoped="" ref="0x403f6630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40405330" loc="52:SenseC.nc">
      <component-ref qname="SenseC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40405330"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x403fee38"/>
        <function-ref name="fired" scoped="" ref="0x403fe0f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x403fe7f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x403fe5a0"/>
        <function-ref name="getdt" scoped="" ref="0x40401310"/>
        <function-ref name="gett0" scoped="" ref="0x404010b8"/>
        <function-ref name="isRunning" scoped="" ref="0x403fe348"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40405958"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x403feb18"/>
        <function-ref name="startOneShot" scoped="" ref="0x40405bd8"/>
        <function-ref name="stop" scoped="" ref="0x40405e58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x40410aa0" loc="47:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x40410aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40410c78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x403c4e68" loc="46:/opt/tinyos-2.1.1/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x403c4e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40410050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x4041cb20" loc="43:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x4041cb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4041ccf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4040fae8" loc="37:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4040fae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4040fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x4041c3c0" loc="41:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x4041c3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x4041c598"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x4041c678"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x4041c758"/>
        <function-ref name="actualMicro" scoped="" ref="0x4041c838"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x4041c918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x4041a218" loc="36:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x4041a218"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4041a3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40415da0" loc="35:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40415da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4041a010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x4041a620" loc="37:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x4041a620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4041a7f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x40414d90" loc="18:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x40414d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4041f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x404149c0" loc="17:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404149c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40414b98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x404268f8" loc="22:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x404268f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40426ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x40423ef8" loc="21:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x40423ef8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404260e0"/>
        <function-ref name="isInput" scoped="" ref="0x404261c0"/>
        <function-ref name="toggle" scoped="" ref="0x404262a0"/>
        <function-ref name="isOutput" scoped="" ref="0x40426380"/>
        <function-ref name="get" scoped="" ref="0x40426460"/>
        <function-ref name="makeOutput" scoped="" ref="0x40426540"/>
        <function-ref name="set" scoped="" ref="0x40426620"/>
        <function-ref name="clr" scoped="" ref="0x40426700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4041f9c0" loc="20:/opt/tinyos-2.1.1/tos/platforms/micaz/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4041f9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4041fb98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x404454b0" loc="91:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x404454b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40445888"/>
        <function-ref name="isInput" scoped="" ref="0x40445968"/>
        <function-ref name="toggle" scoped="" ref="0x40445a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40445b28"/>
        <function-ref name="get" scoped="" ref="0x40445c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40445ce8"/>
        <function-ref name="set" scoped="" ref="0x40445dc8"/>
        <function-ref name="clr" scoped="" ref="0x40445ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x40437a28" loc="65:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x40437a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40437c00"/>
        <function-ref name="isInput" scoped="" ref="0x40437ce0"/>
        <function-ref name="toggle" scoped="" ref="0x40437dc0"/>
        <function-ref name="isOutput" scoped="" ref="0x40437ea0"/>
        <function-ref name="get" scoped="" ref="0x40436010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404360f0"/>
        <function-ref name="set" scoped="" ref="0x404361d0"/>
        <function-ref name="clr" scoped="" ref="0x404362b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x404440a0" loc="76:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x404440a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40444278"/>
        <function-ref name="isInput" scoped="" ref="0x40444358"/>
        <function-ref name="toggle" scoped="" ref="0x40444438"/>
        <function-ref name="isOutput" scoped="" ref="0x40444518"/>
        <function-ref name="get" scoped="" ref="0x404445f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404446d8"/>
        <function-ref name="set" scoped="" ref="0x404447b8"/>
        <function-ref name="clr" scoped="" ref="0x40444898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x40448210" loc="85:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x40448210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404483e8"/>
        <function-ref name="isInput" scoped="" ref="0x404484c8"/>
        <function-ref name="toggle" scoped="" ref="0x404485a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40448688"/>
        <function-ref name="get" scoped="" ref="0x40448768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40448848"/>
        <function-ref name="set" scoped="" ref="0x40448928"/>
        <function-ref name="clr" scoped="" ref="0x40448a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x4042f670" loc="43:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x4042f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042f848"/>
        <function-ref name="isInput" scoped="" ref="0x4042f928"/>
        <function-ref name="toggle" scoped="" ref="0x4042fa08"/>
        <function-ref name="isOutput" scoped="" ref="0x4042fae8"/>
        <function-ref name="get" scoped="" ref="0x4042fbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042fca8"/>
        <function-ref name="set" scoped="" ref="0x4042fd88"/>
        <function-ref name="clr" scoped="" ref="0x4042fe68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x40441ce8" loc="83:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x40441ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40441ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40440010"/>
        <function-ref name="toggle" scoped="" ref="0x404400f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404401d0"/>
        <function-ref name="get" scoped="" ref="0x404402b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40440390"/>
        <function-ref name="set" scoped="" ref="0x40440470"/>
        <function-ref name="clr" scoped="" ref="0x40440550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x4042ea98" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x4042ea98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042ec70"/>
        <function-ref name="isInput" scoped="" ref="0x4042ed50"/>
        <function-ref name="toggle" scoped="" ref="0x4042ee30"/>
        <function-ref name="isOutput" scoped="" ref="0x4042ef10"/>
        <function-ref name="get" scoped="" ref="0x4042d010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042d0f0"/>
        <function-ref name="set" scoped="" ref="0x4042d1d0"/>
        <function-ref name="clr" scoped="" ref="0x4042d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x40431210" loc="57:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x40431210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404313e8"/>
        <function-ref name="isInput" scoped="" ref="0x404314c8"/>
        <function-ref name="toggle" scoped="" ref="0x404315a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40431688"/>
        <function-ref name="get" scoped="" ref="0x40431768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40431848"/>
        <function-ref name="set" scoped="" ref="0x40431928"/>
        <function-ref name="clr" scoped="" ref="0x40431a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x4043f8e0" loc="68:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x4043f8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043fab8"/>
        <function-ref name="isInput" scoped="" ref="0x4043fb98"/>
        <function-ref name="toggle" scoped="" ref="0x4043fc78"/>
        <function-ref name="isOutput" scoped="" ref="0x4043fd58"/>
        <function-ref name="get" scoped="" ref="0x4043fe38"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043ff18"/>
        <function-ref name="set" scoped="" ref="0x4043e010"/>
        <function-ref name="clr" scoped="" ref="0x4043e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x40443ea8" loc="79:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x40443ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404420c0"/>
        <function-ref name="isInput" scoped="" ref="0x404421a0"/>
        <function-ref name="toggle" scoped="" ref="0x40442280"/>
        <function-ref name="isOutput" scoped="" ref="0x40442360"/>
        <function-ref name="get" scoped="" ref="0x40442440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40442520"/>
        <function-ref name="set" scoped="" ref="0x40442600"/>
        <function-ref name="clr" scoped="" ref="0x404426e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x404292f0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x404292f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404294c8"/>
        <function-ref name="isInput" scoped="" ref="0x404295a8"/>
        <function-ref name="toggle" scoped="" ref="0x40429688"/>
        <function-ref name="isOutput" scoped="" ref="0x40429768"/>
        <function-ref name="get" scoped="" ref="0x40429848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40429928"/>
        <function-ref name="set" scoped="" ref="0x40429a08"/>
        <function-ref name="clr" scoped="" ref="0x40429ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x4042c8e0" loc="49:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x4042c8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042cab8"/>
        <function-ref name="isInput" scoped="" ref="0x4042cb98"/>
        <function-ref name="toggle" scoped="" ref="0x4042cc78"/>
        <function-ref name="isOutput" scoped="" ref="0x4042cd58"/>
        <function-ref name="get" scoped="" ref="0x4042ce38"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042cf18"/>
        <function-ref name="set" scoped="" ref="0x40435010"/>
        <function-ref name="clr" scoped="" ref="0x404350f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x404390a0" loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x404390a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40439278"/>
        <function-ref name="isInput" scoped="" ref="0x40439358"/>
        <function-ref name="toggle" scoped="" ref="0x40439438"/>
        <function-ref name="isOutput" scoped="" ref="0x40439518"/>
        <function-ref name="get" scoped="" ref="0x404395f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404396d8"/>
        <function-ref name="set" scoped="" ref="0x404397b8"/>
        <function-ref name="clr" scoped="" ref="0x40439898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x4043d750" loc="71:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x4043d750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043d928"/>
        <function-ref name="isInput" scoped="" ref="0x4043da08"/>
        <function-ref name="toggle" scoped="" ref="0x4043dae8"/>
        <function-ref name="isOutput" scoped="" ref="0x4043dbc8"/>
        <function-ref name="get" scoped="" ref="0x4043dca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043dd88"/>
        <function-ref name="set" scoped="" ref="0x4043de68"/>
        <function-ref name="clr" scoped="" ref="0x4043c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x404460a0" loc="88:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x404460a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40446278"/>
        <function-ref name="isInput" scoped="" ref="0x40446358"/>
        <function-ref name="toggle" scoped="" ref="0x40446438"/>
        <function-ref name="isOutput" scoped="" ref="0x40446518"/>
        <function-ref name="get" scoped="" ref="0x404465f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404466d8"/>
        <function-ref name="set" scoped="" ref="0x404467b8"/>
        <function-ref name="clr" scoped="" ref="0x40446898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x4044d590" loc="94:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x4044d590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4044d768"/>
        <function-ref name="isInput" scoped="" ref="0x4044d848"/>
        <function-ref name="toggle" scoped="" ref="0x4044d928"/>
        <function-ref name="isOutput" scoped="" ref="0x4044da08"/>
        <function-ref name="get" scoped="" ref="0x4044dae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4044dbc8"/>
        <function-ref name="set" scoped="" ref="0x4044dca8"/>
        <function-ref name="clr" scoped="" ref="0x4044dd88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x4043cc08" loc="74:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x4043cc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043cde0"/>
        <function-ref name="isInput" scoped="" ref="0x4043cec0"/>
        <function-ref name="toggle" scoped="" ref="0x4043b010"/>
        <function-ref name="isOutput" scoped="" ref="0x4043b0f0"/>
        <function-ref name="get" scoped="" ref="0x4043b1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043b2b0"/>
        <function-ref name="set" scoped="" ref="0x4043b390"/>
        <function-ref name="clr" scoped="" ref="0x4043b470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x40430210" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x40430210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404303e8"/>
        <function-ref name="isInput" scoped="" ref="0x404304c8"/>
        <function-ref name="toggle" scoped="" ref="0x404305a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40430688"/>
        <function-ref name="get" scoped="" ref="0x40430768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40430848"/>
        <function-ref name="set" scoped="" ref="0x40430928"/>
        <function-ref name="clr" scoped="" ref="0x40430a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x40434830" loc="52:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x40434830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40434a08"/>
        <function-ref name="isInput" scoped="" ref="0x40434ae8"/>
        <function-ref name="toggle" scoped="" ref="0x40434bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x40434ca8"/>
        <function-ref name="get" scoped="" ref="0x40434d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x40434e68"/>
        <function-ref name="set" scoped="" ref="0x40433010"/>
        <function-ref name="clr" scoped="" ref="0x404330f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x4044e0c0" loc="92:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x4044e0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4044e298"/>
        <function-ref name="isInput" scoped="" ref="0x4044e378"/>
        <function-ref name="toggle" scoped="" ref="0x4044e458"/>
        <function-ref name="isOutput" scoped="" ref="0x4044e538"/>
        <function-ref name="get" scoped="" ref="0x4044e618"/>
        <function-ref name="makeOutput" scoped="" ref="0x4044e6f8"/>
        <function-ref name="set" scoped="" ref="0x4044e7d8"/>
        <function-ref name="clr" scoped="" ref="0x4044e8b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x40433ce8" loc="55:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x40433ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40433ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40432010"/>
        <function-ref name="toggle" scoped="" ref="0x404320f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404321d0"/>
        <function-ref name="get" scoped="" ref="0x404322b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40432390"/>
        <function-ref name="set" scoped="" ref="0x40432470"/>
        <function-ref name="clr" scoped="" ref="0x40432550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x404364b0" loc="66:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x404364b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40436688"/>
        <function-ref name="isInput" scoped="" ref="0x40436768"/>
        <function-ref name="toggle" scoped="" ref="0x40436848"/>
        <function-ref name="isOutput" scoped="" ref="0x40436928"/>
        <function-ref name="get" scoped="" ref="0x40436a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40436ae8"/>
        <function-ref name="set" scoped="" ref="0x40436bc8"/>
        <function-ref name="clr" scoped="" ref="0x40436ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x40444a98" loc="77:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x40444a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40444c70"/>
        <function-ref name="isInput" scoped="" ref="0x40444d50"/>
        <function-ref name="toggle" scoped="" ref="0x40444e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40444f10"/>
        <function-ref name="get" scoped="" ref="0x40443010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404430f0"/>
        <function-ref name="set" scoped="" ref="0x404431d0"/>
        <function-ref name="clr" scoped="" ref="0x404432b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x40448c08" loc="86:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x40448c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40448de0"/>
        <function-ref name="isInput" scoped="" ref="0x40448ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40447010"/>
        <function-ref name="isOutput" scoped="" ref="0x404470f0"/>
        <function-ref name="get" scoped="" ref="0x404471d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404472b0"/>
        <function-ref name="set" scoped="" ref="0x40447390"/>
        <function-ref name="clr" scoped="" ref="0x40447470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x4042e0a0" loc="44:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x4042e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042e278"/>
        <function-ref name="isInput" scoped="" ref="0x4042e358"/>
        <function-ref name="toggle" scoped="" ref="0x4042e438"/>
        <function-ref name="isOutput" scoped="" ref="0x4042e518"/>
        <function-ref name="get" scoped="" ref="0x4042e5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042e6d8"/>
        <function-ref name="set" scoped="" ref="0x4042e7b8"/>
        <function-ref name="clr" scoped="" ref="0x4042e898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x4042d4b0" loc="47:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x4042d4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042d688"/>
        <function-ref name="isInput" scoped="" ref="0x4042d768"/>
        <function-ref name="toggle" scoped="" ref="0x4042d848"/>
        <function-ref name="isOutput" scoped="" ref="0x4042d928"/>
        <function-ref name="get" scoped="" ref="0x4042da08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042dae8"/>
        <function-ref name="set" scoped="" ref="0x4042dbc8"/>
        <function-ref name="clr" scoped="" ref="0x4042dca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x40431c08" loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x40431c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40431de0"/>
        <function-ref name="isInput" scoped="" ref="0x40431ec0"/>
        <function-ref name="toggle" scoped="" ref="0x4043a010"/>
        <function-ref name="isOutput" scoped="" ref="0x4043a0f0"/>
        <function-ref name="get" scoped="" ref="0x4043a1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043a2b0"/>
        <function-ref name="set" scoped="" ref="0x4043a390"/>
        <function-ref name="clr" scoped="" ref="0x4043a470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x4043e2f0" loc="69:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x4043e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043e4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4043e5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4043e688"/>
        <function-ref name="isOutput" scoped="" ref="0x4043e768"/>
        <function-ref name="get" scoped="" ref="0x4043e848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043e928"/>
        <function-ref name="set" scoped="" ref="0x4043ea08"/>
        <function-ref name="clr" scoped="" ref="0x4043eae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x404428e0" loc="80:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x404428e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40442ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40442b98"/>
        <function-ref name="toggle" scoped="" ref="0x40442c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40442d58"/>
        <function-ref name="get" scoped="" ref="0x40442e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40442f18"/>
        <function-ref name="set" scoped="" ref="0x40441010"/>
        <function-ref name="clr" scoped="" ref="0x404410f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x40429ce8" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x40429ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40429ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40428010"/>
        <function-ref name="toggle" scoped="" ref="0x404280f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404281d0"/>
        <function-ref name="get" scoped="" ref="0x404282b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40428390"/>
        <function-ref name="set" scoped="" ref="0x40428470"/>
        <function-ref name="clr" scoped="" ref="0x40428550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x404352f0" loc="50:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x404352f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40435548"/>
        <function-ref name="isInput" scoped="" ref="0x40435628"/>
        <function-ref name="toggle" scoped="" ref="0x40435708"/>
        <function-ref name="isOutput" scoped="" ref="0x404357e8"/>
        <function-ref name="get" scoped="" ref="0x404358c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404359a8"/>
        <function-ref name="set" scoped="" ref="0x40435a88"/>
        <function-ref name="clr" scoped="" ref="0x40435b68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x40439a98" loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x40439a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40439c70"/>
        <function-ref name="isInput" scoped="" ref="0x40439d50"/>
        <function-ref name="toggle" scoped="" ref="0x40439e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40439f10"/>
        <function-ref name="get" scoped="" ref="0x40438010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404380f0"/>
        <function-ref name="set" scoped="" ref="0x404381d0"/>
        <function-ref name="clr" scoped="" ref="0x404382b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x40446a98" loc="89:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x40446a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40446c70"/>
        <function-ref name="isInput" scoped="" ref="0x40446d50"/>
        <function-ref name="toggle" scoped="" ref="0x40446e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40446f10"/>
        <function-ref name="get" scoped="" ref="0x40445010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404450f0"/>
        <function-ref name="set" scoped="" ref="0x404451d0"/>
        <function-ref name="clr" scoped="" ref="0x404452b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x40438ea8" loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x40438ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40437208"/>
        <function-ref name="isInput" scoped="" ref="0x404372e8"/>
        <function-ref name="toggle" scoped="" ref="0x404373c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404374a8"/>
        <function-ref name="get" scoped="" ref="0x40437588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40437668"/>
        <function-ref name="set" scoped="" ref="0x40437748"/>
        <function-ref name="clr" scoped="" ref="0x40437828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x4043b670" loc="75:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x4043b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043b848"/>
        <function-ref name="isInput" scoped="" ref="0x4043b928"/>
        <function-ref name="toggle" scoped="" ref="0x4043ba08"/>
        <function-ref name="isOutput" scoped="" ref="0x4043bae8"/>
        <function-ref name="get" scoped="" ref="0x4043bbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043bca8"/>
        <function-ref name="set" scoped="" ref="0x4043bd88"/>
        <function-ref name="clr" scoped="" ref="0x4043be68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x40440750" loc="84:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x40440750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40440928"/>
        <function-ref name="isInput" scoped="" ref="0x40440a08"/>
        <function-ref name="toggle" scoped="" ref="0x40440ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40440bc8"/>
        <function-ref name="get" scoped="" ref="0x40440ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40440d88"/>
        <function-ref name="set" scoped="" ref="0x40440e68"/>
        <function-ref name="clr" scoped="" ref="0x40448010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x4044c010" loc="95:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x4044c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4044c1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4044c2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4044c3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4044c488"/>
        <function-ref name="get" scoped="" ref="0x4044c568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4044c648"/>
        <function-ref name="set" scoped="" ref="0x4044c728"/>
        <function-ref name="clr" scoped="" ref="0x4044c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x40430c08" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x40430c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40430de0"/>
        <function-ref name="isInput" scoped="" ref="0x40430ec0"/>
        <function-ref name="toggle" scoped="" ref="0x4042f010"/>
        <function-ref name="isOutput" scoped="" ref="0x4042f0f0"/>
        <function-ref name="get" scoped="" ref="0x4042f1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042f2b0"/>
        <function-ref name="set" scoped="" ref="0x4042f390"/>
        <function-ref name="clr" scoped="" ref="0x4042f470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x404332f0" loc="53:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x404332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404334c8"/>
        <function-ref name="isInput" scoped="" ref="0x404335a8"/>
        <function-ref name="toggle" scoped="" ref="0x40433688"/>
        <function-ref name="isOutput" scoped="" ref="0x40433768"/>
        <function-ref name="get" scoped="" ref="0x40433848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40433928"/>
        <function-ref name="set" scoped="" ref="0x40433a08"/>
        <function-ref name="clr" scoped="" ref="0x40433ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x404412f0" loc="82:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x404412f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404414c8"/>
        <function-ref name="isInput" scoped="" ref="0x404415a8"/>
        <function-ref name="toggle" scoped="" ref="0x40441688"/>
        <function-ref name="isOutput" scoped="" ref="0x40441768"/>
        <function-ref name="get" scoped="" ref="0x40441848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40441928"/>
        <function-ref name="set" scoped="" ref="0x40441a08"/>
        <function-ref name="clr" scoped="" ref="0x40441ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x40432750" loc="56:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x40432750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40432928"/>
        <function-ref name="isInput" scoped="" ref="0x40432a08"/>
        <function-ref name="toggle" scoped="" ref="0x40432ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40432bc8"/>
        <function-ref name="get" scoped="" ref="0x40432ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40432d88"/>
        <function-ref name="set" scoped="" ref="0x40432e68"/>
        <function-ref name="clr" scoped="" ref="0x40431010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x40436ea8" loc="67:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x40436ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043f0c0"/>
        <function-ref name="isInput" scoped="" ref="0x4043f1a0"/>
        <function-ref name="toggle" scoped="" ref="0x4043f280"/>
        <function-ref name="isOutput" scoped="" ref="0x4043f360"/>
        <function-ref name="get" scoped="" ref="0x4043f440"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043f520"/>
        <function-ref name="set" scoped="" ref="0x4043f600"/>
        <function-ref name="clr" scoped="" ref="0x4043f6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x404434b0" loc="78:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x404434b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40443688"/>
        <function-ref name="isInput" scoped="" ref="0x40443768"/>
        <function-ref name="toggle" scoped="" ref="0x40443848"/>
        <function-ref name="isOutput" scoped="" ref="0x40443928"/>
        <function-ref name="get" scoped="" ref="0x40443a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40443ae8"/>
        <function-ref name="set" scoped="" ref="0x40443bc8"/>
        <function-ref name="clr" scoped="" ref="0x40443ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x40447670" loc="87:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x40447670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40447848"/>
        <function-ref name="isInput" scoped="" ref="0x40447928"/>
        <function-ref name="toggle" scoped="" ref="0x40447a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40447ae8"/>
        <function-ref name="get" scoped="" ref="0x40447bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40447ca8"/>
        <function-ref name="set" scoped="" ref="0x40447d88"/>
        <function-ref name="clr" scoped="" ref="0x40447e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x4041e8d8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x4041e8d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4041eab0"/>
        <function-ref name="isInput" scoped="" ref="0x4041eb90"/>
        <function-ref name="toggle" scoped="" ref="0x4041ec70"/>
        <function-ref name="isOutput" scoped="" ref="0x4041ed50"/>
        <function-ref name="get" scoped="" ref="0x4041ee30"/>
        <function-ref name="makeOutput" scoped="" ref="0x4041ef10"/>
        <function-ref name="set" scoped="" ref="0x40429010"/>
        <function-ref name="clr" scoped="" ref="0x404290f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x4042dea8" loc="48:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x4042dea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4042c0c0"/>
        <function-ref name="isInput" scoped="" ref="0x4042c1a0"/>
        <function-ref name="toggle" scoped="" ref="0x4042c280"/>
        <function-ref name="isOutput" scoped="" ref="0x4042c360"/>
        <function-ref name="get" scoped="" ref="0x4042c440"/>
        <function-ref name="makeOutput" scoped="" ref="0x4042c520"/>
        <function-ref name="set" scoped="" ref="0x4042c600"/>
        <function-ref name="clr" scoped="" ref="0x4042c6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x4043a670" loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x4043a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043a848"/>
        <function-ref name="isInput" scoped="" ref="0x4043a928"/>
        <function-ref name="toggle" scoped="" ref="0x4043aa08"/>
        <function-ref name="isOutput" scoped="" ref="0x4043aae8"/>
        <function-ref name="get" scoped="" ref="0x4043abc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043aca8"/>
        <function-ref name="set" scoped="" ref="0x4043ad88"/>
        <function-ref name="clr" scoped="" ref="0x4043ae68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x4043ece8" loc="70:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x4043ece8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043eec0"/>
        <function-ref name="isInput" scoped="" ref="0x4043d010"/>
        <function-ref name="toggle" scoped="" ref="0x4043d0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4043d1d0"/>
        <function-ref name="get" scoped="" ref="0x4043d2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043d390"/>
        <function-ref name="set" scoped="" ref="0x4043d470"/>
        <function-ref name="clr" scoped="" ref="0x4043d550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x4044eab8" loc="93:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x4044eab8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4044ec90"/>
        <function-ref name="isInput" scoped="" ref="0x4044ed70"/>
        <function-ref name="toggle" scoped="" ref="0x4044ee50"/>
        <function-ref name="isOutput" scoped="" ref="0x4044d010"/>
        <function-ref name="get" scoped="" ref="0x4044d0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4044d1d0"/>
        <function-ref name="set" scoped="" ref="0x4044d2b0"/>
        <function-ref name="clr" scoped="" ref="0x4044d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x4043c210" loc="73:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x4043c210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4043c3e8"/>
        <function-ref name="isInput" scoped="" ref="0x4043c4c8"/>
        <function-ref name="toggle" scoped="" ref="0x4043c5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4043c688"/>
        <function-ref name="get" scoped="" ref="0x4043c768"/>
        <function-ref name="makeOutput" scoped="" ref="0x4043c848"/>
        <function-ref name="set" scoped="" ref="0x4043c928"/>
        <function-ref name="clr" scoped="" ref="0x4043ca08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x404384b0" loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x404384b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40438688"/>
        <function-ref name="isInput" scoped="" ref="0x40438768"/>
        <function-ref name="toggle" scoped="" ref="0x40438848"/>
        <function-ref name="isOutput" scoped="" ref="0x40438928"/>
        <function-ref name="get" scoped="" ref="0x40438a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40438ae8"/>
        <function-ref name="set" scoped="" ref="0x40438bc8"/>
        <function-ref name="clr" scoped="" ref="0x40438ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x40428750" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x40428750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40428928"/>
        <function-ref name="isInput" scoped="" ref="0x40428a08"/>
        <function-ref name="toggle" scoped="" ref="0x40428ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40428bc8"/>
        <function-ref name="get" scoped="" ref="0x40428ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40428d88"/>
        <function-ref name="set" scoped="" ref="0x40428e68"/>
        <function-ref name="clr" scoped="" ref="0x40430010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x40435d68" loc="51:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x40435d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40434010"/>
        <function-ref name="isInput" scoped="" ref="0x404340f0"/>
        <function-ref name="toggle" scoped="" ref="0x404341d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404342b0"/>
        <function-ref name="get" scoped="" ref="0x40434390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40434470"/>
        <function-ref name="set" scoped="" ref="0x40434550"/>
        <function-ref name="clr" scoped="" ref="0x40434630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404734f0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404734f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404736c8"/>
        <function-ref name="isInput" scoped="" ref="0x404737a8"/>
        <function-ref name="toggle" scoped="" ref="0x40473888"/>
        <function-ref name="isOutput" scoped="" ref="0x40473968"/>
        <function-ref name="get" scoped="" ref="0x40473a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40473b28"/>
        <function-ref name="set" scoped="" ref="0x40473c08"/>
        <function-ref name="clr" scoped="" ref="0x40473ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4047b170" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4047b170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047b348"/>
        <function-ref name="isInput" scoped="" ref="0x4047b428"/>
        <function-ref name="toggle" scoped="" ref="0x4047b508"/>
        <function-ref name="isOutput" scoped="" ref="0x4047b5e8"/>
        <function-ref name="get" scoped="" ref="0x4047b6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047b7a8"/>
        <function-ref name="set" scoped="" ref="0x4047b888"/>
        <function-ref name="clr" scoped="" ref="0x4047b968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40474228" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40474228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40474400"/>
        <function-ref name="isInput" scoped="" ref="0x404744e0"/>
        <function-ref name="toggle" scoped="" ref="0x404745c0"/>
        <function-ref name="isOutput" scoped="" ref="0x404746a0"/>
        <function-ref name="get" scoped="" ref="0x40474780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40474860"/>
        <function-ref name="set" scoped="" ref="0x40474940"/>
        <function-ref name="clr" scoped="" ref="0x40474a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40473e48" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40473e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40472050"/>
        <function-ref name="isInput" scoped="" ref="0x40472130"/>
        <function-ref name="toggle" scoped="" ref="0x40472210"/>
        <function-ref name="isOutput" scoped="" ref="0x404722f0"/>
        <function-ref name="get" scoped="" ref="0x404723d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404724b0"/>
        <function-ref name="set" scoped="" ref="0x40472590"/>
        <function-ref name="clr" scoped="" ref="0x40472670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4047bac8" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4047bac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047bca0"/>
        <function-ref name="isInput" scoped="" ref="0x4047bd80"/>
        <function-ref name="toggle" scoped="" ref="0x4047be60"/>
        <function-ref name="isOutput" scoped="" ref="0x4047a010"/>
        <function-ref name="get" scoped="" ref="0x4047a0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047a1d0"/>
        <function-ref name="set" scoped="" ref="0x4047a2b0"/>
        <function-ref name="clr" scoped="" ref="0x4047a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40474b80" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40474b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40474d58"/>
        <function-ref name="isInput" scoped="" ref="0x40474e38"/>
        <function-ref name="toggle" scoped="" ref="0x40474f18"/>
        <function-ref name="isOutput" scoped="" ref="0x40473010"/>
        <function-ref name="get" scoped="" ref="0x404730f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404731d0"/>
        <function-ref name="set" scoped="" ref="0x404732b0"/>
        <function-ref name="clr" scoped="" ref="0x40473390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x404727d0" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x404727d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404729a8"/>
        <function-ref name="isInput" scoped="" ref="0x40472a88"/>
        <function-ref name="toggle" scoped="" ref="0x40472b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40472c48"/>
        <function-ref name="get" scoped="" ref="0x40472d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40472e08"/>
        <function-ref name="set" scoped="" ref="0x40472ee8"/>
        <function-ref name="clr" scoped="" ref="0x4047b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4047a4f0" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4047a4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047a6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4047a7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4047a888"/>
        <function-ref name="isOutput" scoped="" ref="0x4047a968"/>
        <function-ref name="get" scoped="" ref="0x4047aa48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047ab28"/>
        <function-ref name="set" scoped="" ref="0x4047ac08"/>
        <function-ref name="clr" scoped="" ref="0x4047ace8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40741010" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40741010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407411e8"/>
        <function-ref name="isInput" scoped="" ref="0x407412c8"/>
        <function-ref name="toggle" scoped="" ref="0x407413a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40741488"/>
        <function-ref name="get" scoped="" ref="0x40741568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40741648"/>
        <function-ref name="set" scoped="" ref="0x40741728"/>
        <function-ref name="clr" scoped="" ref="0x40741808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407409e8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407409e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40740bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40740ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40740d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40740e60"/>
        <function-ref name="get" scoped="" ref="0x4073f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4073f0f0"/>
        <function-ref name="set" scoped="" ref="0x4073f1d0"/>
        <function-ref name="clr" scoped="" ref="0x4073f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4073e538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4073e538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4073e710"/>
        <function-ref name="isInput" scoped="" ref="0x4073e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x4073e8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4073e9b0"/>
        <function-ref name="get" scoped="" ref="0x4073ea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4073eb70"/>
        <function-ref name="set" scoped="" ref="0x4073ec50"/>
        <function-ref name="clr" scoped="" ref="0x4073ed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4073c010" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4073c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4073c1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4073c2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4073c3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4073c488"/>
        <function-ref name="get" scoped="" ref="0x4073c568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4073c648"/>
        <function-ref name="set" scoped="" ref="0x4073c728"/>
        <function-ref name="clr" scoped="" ref="0x4073c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4073b9e8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4073b9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4073bbc0"/>
        <function-ref name="isInput" scoped="" ref="0x4073bca0"/>
        <function-ref name="toggle" scoped="" ref="0x4073bd80"/>
        <function-ref name="isOutput" scoped="" ref="0x4073be60"/>
        <function-ref name="get" scoped="" ref="0x4073a010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4073a0f0"/>
        <function-ref name="set" scoped="" ref="0x4073a1d0"/>
        <function-ref name="clr" scoped="" ref="0x4073a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4074f538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4074f538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4074f710"/>
        <function-ref name="isInput" scoped="" ref="0x4074f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x4074f8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4074f9b0"/>
        <function-ref name="get" scoped="" ref="0x4074fa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4074fb70"/>
        <function-ref name="set" scoped="" ref="0x4074fc50"/>
        <function-ref name="clr" scoped="" ref="0x4074fd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4074d010" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4074d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4074d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4074d2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4074d3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4074d488"/>
        <function-ref name="get" scoped="" ref="0x4074d568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4074d648"/>
        <function-ref name="set" scoped="" ref="0x4074d728"/>
        <function-ref name="clr" scoped="" ref="0x4074d808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4074c9e8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4074c9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4074cbc0"/>
        <function-ref name="isInput" scoped="" ref="0x4074cca0"/>
        <function-ref name="toggle" scoped="" ref="0x4074cd80"/>
        <function-ref name="isOutput" scoped="" ref="0x4074ce60"/>
        <function-ref name="get" scoped="" ref="0x4074b010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4074b0f0"/>
        <function-ref name="set" scoped="" ref="0x4074b1d0"/>
        <function-ref name="clr" scoped="" ref="0x4074b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40480e48" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40480e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047f050"/>
        <function-ref name="isInput" scoped="" ref="0x4047f130"/>
        <function-ref name="toggle" scoped="" ref="0x4047f210"/>
        <function-ref name="isOutput" scoped="" ref="0x4047f2f0"/>
        <function-ref name="get" scoped="" ref="0x4047f3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047f4b0"/>
        <function-ref name="set" scoped="" ref="0x4047f590"/>
        <function-ref name="clr" scoped="" ref="0x4047f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4047eac8" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4047eac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047eca0"/>
        <function-ref name="isInput" scoped="" ref="0x4047ed80"/>
        <function-ref name="toggle" scoped="" ref="0x4047ee60"/>
        <function-ref name="isOutput" scoped="" ref="0x4047d010"/>
        <function-ref name="get" scoped="" ref="0x4047d0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047d1d0"/>
        <function-ref name="set" scoped="" ref="0x4047d2b0"/>
        <function-ref name="clr" scoped="" ref="0x4047d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40477b00" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40477b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40477cd8"/>
        <function-ref name="isInput" scoped="" ref="0x40477db8"/>
        <function-ref name="toggle" scoped="" ref="0x40477e98"/>
        <function-ref name="isOutput" scoped="" ref="0x40480010"/>
        <function-ref name="get" scoped="" ref="0x404800f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404801d0"/>
        <function-ref name="set" scoped="" ref="0x404802b0"/>
        <function-ref name="clr" scoped="" ref="0x40480390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4047f7d0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4047f7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047f9a8"/>
        <function-ref name="isInput" scoped="" ref="0x4047fa88"/>
        <function-ref name="toggle" scoped="" ref="0x4047fb68"/>
        <function-ref name="isOutput" scoped="" ref="0x4047fc48"/>
        <function-ref name="get" scoped="" ref="0x4047fd28"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047fe08"/>
        <function-ref name="set" scoped="" ref="0x4047fee8"/>
        <function-ref name="clr" scoped="" ref="0x4047e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4047d4f0" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4047d4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047d6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4047d7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4047d888"/>
        <function-ref name="isOutput" scoped="" ref="0x4047d968"/>
        <function-ref name="get" scoped="" ref="0x4047da48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047db28"/>
        <function-ref name="set" scoped="" ref="0x4047dc08"/>
        <function-ref name="clr" scoped="" ref="0x4047dce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x404804f0" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x404804f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404806c8"/>
        <function-ref name="isInput" scoped="" ref="0x404807a8"/>
        <function-ref name="toggle" scoped="" ref="0x40480888"/>
        <function-ref name="isOutput" scoped="" ref="0x40480968"/>
        <function-ref name="get" scoped="" ref="0x40480a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40480b28"/>
        <function-ref name="set" scoped="" ref="0x40480c08"/>
        <function-ref name="clr" scoped="" ref="0x40480ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x4047e170" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x4047e170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047e348"/>
        <function-ref name="isInput" scoped="" ref="0x4047e428"/>
        <function-ref name="toggle" scoped="" ref="0x4047e508"/>
        <function-ref name="isOutput" scoped="" ref="0x4047e5e8"/>
        <function-ref name="get" scoped="" ref="0x4047e6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047e7a8"/>
        <function-ref name="set" scoped="" ref="0x4047e888"/>
        <function-ref name="clr" scoped="" ref="0x4047e968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4047de48" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4047de48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4047c050"/>
        <function-ref name="isInput" scoped="" ref="0x4047c130"/>
        <function-ref name="toggle" scoped="" ref="0x4047c210"/>
        <function-ref name="isOutput" scoped="" ref="0x4047c2f0"/>
        <function-ref name="get" scoped="" ref="0x4047c3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4047c4b0"/>
        <function-ref name="set" scoped="" ref="0x4047c590"/>
        <function-ref name="clr" scoped="" ref="0x4047c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4077bde8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4077bde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40776010"/>
        <function-ref name="isInput" scoped="" ref="0x407760f0"/>
        <function-ref name="toggle" scoped="" ref="0x407761d0"/>
        <function-ref name="isOutput" scoped="" ref="0x407762b0"/>
        <function-ref name="get" scoped="" ref="0x40776390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40776470"/>
        <function-ref name="set" scoped="" ref="0x40776550"/>
        <function-ref name="clr" scoped="" ref="0x40776630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407757f8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407757f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407759d0"/>
        <function-ref name="isInput" scoped="" ref="0x40775ab0"/>
        <function-ref name="toggle" scoped="" ref="0x40775b90"/>
        <function-ref name="isOutput" scoped="" ref="0x40775c70"/>
        <function-ref name="get" scoped="" ref="0x40775d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40775e30"/>
        <function-ref name="set" scoped="" ref="0x40775f10"/>
        <function-ref name="clr" scoped="" ref="0x40774010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40773228" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40773228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40773400"/>
        <function-ref name="isInput" scoped="" ref="0x407734e0"/>
        <function-ref name="toggle" scoped="" ref="0x407735c0"/>
        <function-ref name="isOutput" scoped="" ref="0x407736a0"/>
        <function-ref name="get" scoped="" ref="0x40773780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40773860"/>
        <function-ref name="set" scoped="" ref="0x40773940"/>
        <function-ref name="clr" scoped="" ref="0x40773a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40772c08" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40772c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40772de0"/>
        <function-ref name="isInput" scoped="" ref="0x40772ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40771010"/>
        <function-ref name="isOutput" scoped="" ref="0x407710f0"/>
        <function-ref name="get" scoped="" ref="0x407711d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x407712b0"/>
        <function-ref name="set" scoped="" ref="0x40771390"/>
        <function-ref name="clr" scoped="" ref="0x40771470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407876c0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407876c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40787898"/>
        <function-ref name="isInput" scoped="" ref="0x40787978"/>
        <function-ref name="toggle" scoped="" ref="0x40787a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40787b38"/>
        <function-ref name="get" scoped="" ref="0x40787c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40787cf8"/>
        <function-ref name="set" scoped="" ref="0x40787dd8"/>
        <function-ref name="clr" scoped="" ref="0x40787eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407850b0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407850b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40785288"/>
        <function-ref name="isInput" scoped="" ref="0x40785368"/>
        <function-ref name="toggle" scoped="" ref="0x40785448"/>
        <function-ref name="isOutput" scoped="" ref="0x40785528"/>
        <function-ref name="get" scoped="" ref="0x40785608"/>
        <function-ref name="makeOutput" scoped="" ref="0x407856e8"/>
        <function-ref name="set" scoped="" ref="0x407857c8"/>
        <function-ref name="clr" scoped="" ref="0x407858a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40784a88" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40784a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40784c60"/>
        <function-ref name="isInput" scoped="" ref="0x40784d40"/>
        <function-ref name="toggle" scoped="" ref="0x40784e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40784f00"/>
        <function-ref name="get" scoped="" ref="0x40783010"/>
        <function-ref name="makeOutput" scoped="" ref="0x407830f0"/>
        <function-ref name="set" scoped="" ref="0x407831d0"/>
        <function-ref name="clr" scoped="" ref="0x407832b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40782538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40782538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40782710"/>
        <function-ref name="isInput" scoped="" ref="0x407827f0"/>
        <function-ref name="toggle" scoped="" ref="0x407828d0"/>
        <function-ref name="isOutput" scoped="" ref="0x407829b0"/>
        <function-ref name="get" scoped="" ref="0x40782a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40782b70"/>
        <function-ref name="set" scoped="" ref="0x40782c50"/>
        <function-ref name="clr" scoped="" ref="0x40782d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404846b0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404846b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40484888"/>
        <function-ref name="isInput" scoped="" ref="0x40484968"/>
        <function-ref name="toggle" scoped="" ref="0x40484a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40484b28"/>
        <function-ref name="get" scoped="" ref="0x40484c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40484ce8"/>
        <function-ref name="set" scoped="" ref="0x40484dc8"/>
        <function-ref name="clr" scoped="" ref="0x40484ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40482330" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40482330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40482508"/>
        <function-ref name="isInput" scoped="" ref="0x404825e8"/>
        <function-ref name="toggle" scoped="" ref="0x404826c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404827a8"/>
        <function-ref name="get" scoped="" ref="0x40482888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40482968"/>
        <function-ref name="set" scoped="" ref="0x40482a48"/>
        <function-ref name="clr" scoped="" ref="0x40482b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x404853d8" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x404853d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404855b0"/>
        <function-ref name="isInput" scoped="" ref="0x40485690"/>
        <function-ref name="toggle" scoped="" ref="0x40485770"/>
        <function-ref name="isOutput" scoped="" ref="0x40485850"/>
        <function-ref name="get" scoped="" ref="0x40485930"/>
        <function-ref name="makeOutput" scoped="" ref="0x40485a10"/>
        <function-ref name="set" scoped="" ref="0x40485af0"/>
        <function-ref name="clr" scoped="" ref="0x40485bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40483030" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40483030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40483208"/>
        <function-ref name="isInput" scoped="" ref="0x404832e8"/>
        <function-ref name="toggle" scoped="" ref="0x404833c8"/>
        <function-ref name="isOutput" scoped="" ref="0x404834a8"/>
        <function-ref name="get" scoped="" ref="0x40483588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40483668"/>
        <function-ref name="set" scoped="" ref="0x40483748"/>
        <function-ref name="clr" scoped="" ref="0x40483828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40482c88" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40482c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40482e60"/>
        <function-ref name="isInput" scoped="" ref="0x4048c010"/>
        <function-ref name="toggle" scoped="" ref="0x4048c0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4048c1d0"/>
        <function-ref name="get" scoped="" ref="0x4048c2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048c390"/>
        <function-ref name="set" scoped="" ref="0x4048c470"/>
        <function-ref name="clr" scoped="" ref="0x4048c550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40485d30" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40485d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40485f08"/>
        <function-ref name="isInput" scoped="" ref="0x40484010"/>
        <function-ref name="toggle" scoped="" ref="0x404840f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404841d0"/>
        <function-ref name="get" scoped="" ref="0x404842b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40484390"/>
        <function-ref name="set" scoped="" ref="0x40484470"/>
        <function-ref name="clr" scoped="" ref="0x40484550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40483988" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40483988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40483b60"/>
        <function-ref name="isInput" scoped="" ref="0x40483c40"/>
        <function-ref name="toggle" scoped="" ref="0x40483d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40483e00"/>
        <function-ref name="get" scoped="" ref="0x40483ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40482010"/>
        <function-ref name="set" scoped="" ref="0x404820f0"/>
        <function-ref name="clr" scoped="" ref="0x404821d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4048c6b0" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4048c6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048c888"/>
        <function-ref name="isInput" scoped="" ref="0x4048c968"/>
        <function-ref name="toggle" scoped="" ref="0x4048ca48"/>
        <function-ref name="isOutput" scoped="" ref="0x4048cb28"/>
        <function-ref name="get" scoped="" ref="0x4048cc08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048cce8"/>
        <function-ref name="set" scoped="" ref="0x4048cdc8"/>
        <function-ref name="clr" scoped="" ref="0x4048cea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407b6938" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407b6938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407b6b10"/>
        <function-ref name="isInput" scoped="" ref="0x407b6bf0"/>
        <function-ref name="toggle" scoped="" ref="0x407b6cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x407b6db0"/>
        <function-ref name="get" scoped="" ref="0x407b6e90"/>
        <function-ref name="makeOutput" scoped="" ref="0x407b5010"/>
        <function-ref name="set" scoped="" ref="0x407b50f0"/>
        <function-ref name="clr" scoped="" ref="0x407b51d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407b43b0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407b43b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407b4588"/>
        <function-ref name="isInput" scoped="" ref="0x407b4668"/>
        <function-ref name="toggle" scoped="" ref="0x407b4748"/>
        <function-ref name="isOutput" scoped="" ref="0x407b4828"/>
        <function-ref name="get" scoped="" ref="0x407b4908"/>
        <function-ref name="makeOutput" scoped="" ref="0x407b49e8"/>
        <function-ref name="set" scoped="" ref="0x407b4ac8"/>
        <function-ref name="clr" scoped="" ref="0x407b4ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407b3d70" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407b3d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407b2010"/>
        <function-ref name="isInput" scoped="" ref="0x407b20f0"/>
        <function-ref name="toggle" scoped="" ref="0x407b21d0"/>
        <function-ref name="isOutput" scoped="" ref="0x407b22b0"/>
        <function-ref name="get" scoped="" ref="0x407b2390"/>
        <function-ref name="makeOutput" scoped="" ref="0x407b2470"/>
        <function-ref name="set" scoped="" ref="0x407b2550"/>
        <function-ref name="clr" scoped="" ref="0x407b2630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407b17f8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407b17f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407b19d0"/>
        <function-ref name="isInput" scoped="" ref="0x407b1ab0"/>
        <function-ref name="toggle" scoped="" ref="0x407b1b90"/>
        <function-ref name="isOutput" scoped="" ref="0x407b1c70"/>
        <function-ref name="get" scoped="" ref="0x407b1d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x407b1e30"/>
        <function-ref name="set" scoped="" ref="0x407b1f10"/>
        <function-ref name="clr" scoped="" ref="0x407b0010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407af228" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407af228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407af400"/>
        <function-ref name="isInput" scoped="" ref="0x407af4e0"/>
        <function-ref name="toggle" scoped="" ref="0x407af5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x407af6a0"/>
        <function-ref name="get" scoped="" ref="0x407af780"/>
        <function-ref name="makeOutput" scoped="" ref="0x407af860"/>
        <function-ref name="set" scoped="" ref="0x407af940"/>
        <function-ref name="clr" scoped="" ref="0x407afa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407aec08" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407aec08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407aede0"/>
        <function-ref name="isInput" scoped="" ref="0x407aeec0"/>
        <function-ref name="toggle" scoped="" ref="0x407ad010"/>
        <function-ref name="isOutput" scoped="" ref="0x407ad0f0"/>
        <function-ref name="get" scoped="" ref="0x407ad1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x407ad2b0"/>
        <function-ref name="set" scoped="" ref="0x407ad390"/>
        <function-ref name="clr" scoped="" ref="0x407ad470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407ac6c0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407ac6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407ac898"/>
        <function-ref name="isInput" scoped="" ref="0x407ac978"/>
        <function-ref name="toggle" scoped="" ref="0x407aca58"/>
        <function-ref name="isOutput" scoped="" ref="0x407acb38"/>
        <function-ref name="get" scoped="" ref="0x407acc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x407accf8"/>
        <function-ref name="set" scoped="" ref="0x407acdd8"/>
        <function-ref name="clr" scoped="" ref="0x407aceb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407c20b0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407c20b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407c2288"/>
        <function-ref name="isInput" scoped="" ref="0x407c2368"/>
        <function-ref name="toggle" scoped="" ref="0x407c2448"/>
        <function-ref name="isOutput" scoped="" ref="0x407c2528"/>
        <function-ref name="get" scoped="" ref="0x407c2608"/>
        <function-ref name="makeOutput" scoped="" ref="0x407c26e8"/>
        <function-ref name="set" scoped="" ref="0x407c27c8"/>
        <function-ref name="clr" scoped="" ref="0x407c28a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40493170" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40493170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40493348"/>
        <function-ref name="isInput" scoped="" ref="0x40493428"/>
        <function-ref name="toggle" scoped="" ref="0x40493508"/>
        <function-ref name="isOutput" scoped="" ref="0x404935e8"/>
        <function-ref name="get" scoped="" ref="0x404936c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404937a8"/>
        <function-ref name="set" scoped="" ref="0x40493888"/>
        <function-ref name="clr" scoped="" ref="0x40493968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40492e48" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40492e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40491050"/>
        <function-ref name="isInput" scoped="" ref="0x40491130"/>
        <function-ref name="toggle" scoped="" ref="0x40491210"/>
        <function-ref name="isOutput" scoped="" ref="0x404912f0"/>
        <function-ref name="get" scoped="" ref="0x404913d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404914b0"/>
        <function-ref name="set" scoped="" ref="0x40491590"/>
        <function-ref name="clr" scoped="" ref="0x40491670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40489dc8" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40489dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40488010"/>
        <function-ref name="isInput" scoped="" ref="0x404880f0"/>
        <function-ref name="toggle" scoped="" ref="0x404881d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404882b0"/>
        <function-ref name="get" scoped="" ref="0x40488390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40488470"/>
        <function-ref name="set" scoped="" ref="0x40488550"/>
        <function-ref name="clr" scoped="" ref="0x40488630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40493ac8" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40493ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40493ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40493d80"/>
        <function-ref name="toggle" scoped="" ref="0x40493e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40492010"/>
        <function-ref name="get" scoped="" ref="0x404920f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404921d0"/>
        <function-ref name="set" scoped="" ref="0x404922b0"/>
        <function-ref name="clr" scoped="" ref="0x40492390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x404917d0" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x404917d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404919a8"/>
        <function-ref name="isInput" scoped="" ref="0x40491a88"/>
        <function-ref name="toggle" scoped="" ref="0x40491b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40491c48"/>
        <function-ref name="get" scoped="" ref="0x40491d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40491e08"/>
        <function-ref name="set" scoped="" ref="0x40491ee8"/>
        <function-ref name="clr" scoped="" ref="0x40490010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40488790" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40488790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40488968"/>
        <function-ref name="isInput" scoped="" ref="0x40488a48"/>
        <function-ref name="toggle" scoped="" ref="0x40488b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40488c08"/>
        <function-ref name="get" scoped="" ref="0x40488ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40488dc8"/>
        <function-ref name="set" scoped="" ref="0x40488ea8"/>
        <function-ref name="clr" scoped="" ref="0x40493010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x404924f0" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x404924f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404926c8"/>
        <function-ref name="isInput" scoped="" ref="0x404927a8"/>
        <function-ref name="toggle" scoped="" ref="0x40492888"/>
        <function-ref name="isOutput" scoped="" ref="0x40492968"/>
        <function-ref name="get" scoped="" ref="0x40492a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40492b28"/>
        <function-ref name="set" scoped="" ref="0x40492c08"/>
        <function-ref name="clr" scoped="" ref="0x40492ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40490170" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40490170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40490348"/>
        <function-ref name="isInput" scoped="" ref="0x40490428"/>
        <function-ref name="toggle" scoped="" ref="0x40490508"/>
        <function-ref name="isOutput" scoped="" ref="0x404905e8"/>
        <function-ref name="get" scoped="" ref="0x404906c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404907a8"/>
        <function-ref name="set" scoped="" ref="0x40490888"/>
        <function-ref name="clr" scoped="" ref="0x40490968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407dd538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407dd538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407dd710"/>
        <function-ref name="isInput" scoped="" ref="0x407dd7f0"/>
        <function-ref name="toggle" scoped="" ref="0x407dd8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x407dd9b0"/>
        <function-ref name="get" scoped="" ref="0x407dda90"/>
        <function-ref name="makeOutput" scoped="" ref="0x407ddb70"/>
        <function-ref name="set" scoped="" ref="0x407ddc50"/>
        <function-ref name="clr" scoped="" ref="0x407ddd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407f3010" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407f3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407f31e8"/>
        <function-ref name="isInput" scoped="" ref="0x407f32c8"/>
        <function-ref name="toggle" scoped="" ref="0x407f33a8"/>
        <function-ref name="isOutput" scoped="" ref="0x407f3488"/>
        <function-ref name="get" scoped="" ref="0x407f3568"/>
        <function-ref name="makeOutput" scoped="" ref="0x407f3648"/>
        <function-ref name="set" scoped="" ref="0x407f3728"/>
        <function-ref name="clr" scoped="" ref="0x407f3808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407f29e8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407f29e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407f2bc0"/>
        <function-ref name="isInput" scoped="" ref="0x407f2ca0"/>
        <function-ref name="toggle" scoped="" ref="0x407f2d80"/>
        <function-ref name="isOutput" scoped="" ref="0x407f2e60"/>
        <function-ref name="get" scoped="" ref="0x407f1010"/>
        <function-ref name="makeOutput" scoped="" ref="0x407f10f0"/>
        <function-ref name="set" scoped="" ref="0x407f11d0"/>
        <function-ref name="clr" scoped="" ref="0x407f12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407f0538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407f0538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407f0710"/>
        <function-ref name="isInput" scoped="" ref="0x407f07f0"/>
        <function-ref name="toggle" scoped="" ref="0x407f08d0"/>
        <function-ref name="isOutput" scoped="" ref="0x407f09b0"/>
        <function-ref name="get" scoped="" ref="0x407f0a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x407f0b70"/>
        <function-ref name="set" scoped="" ref="0x407f0c50"/>
        <function-ref name="clr" scoped="" ref="0x407f0d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407ee010" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407ee010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407ee1e8"/>
        <function-ref name="isInput" scoped="" ref="0x407ee2c8"/>
        <function-ref name="toggle" scoped="" ref="0x407ee3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x407ee488"/>
        <function-ref name="get" scoped="" ref="0x407ee568"/>
        <function-ref name="makeOutput" scoped="" ref="0x407ee648"/>
        <function-ref name="set" scoped="" ref="0x407ee728"/>
        <function-ref name="clr" scoped="" ref="0x407ee808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407ed9e8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407ed9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407edbc0"/>
        <function-ref name="isInput" scoped="" ref="0x407edca0"/>
        <function-ref name="toggle" scoped="" ref="0x407edd80"/>
        <function-ref name="isOutput" scoped="" ref="0x407ede60"/>
        <function-ref name="get" scoped="" ref="0x407ec010"/>
        <function-ref name="makeOutput" scoped="" ref="0x407ec0f0"/>
        <function-ref name="set" scoped="" ref="0x407ec1d0"/>
        <function-ref name="clr" scoped="" ref="0x407ec2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407eb538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407eb538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407eb710"/>
        <function-ref name="isInput" scoped="" ref="0x407eb7f0"/>
        <function-ref name="toggle" scoped="" ref="0x407eb8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x407eb9b0"/>
        <function-ref name="get" scoped="" ref="0x407eba90"/>
        <function-ref name="makeOutput" scoped="" ref="0x407ebb70"/>
        <function-ref name="set" scoped="" ref="0x407ebc50"/>
        <function-ref name="clr" scoped="" ref="0x407ebd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x407e9010" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x407e9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x407e91e8"/>
        <function-ref name="isInput" scoped="" ref="0x407e92c8"/>
        <function-ref name="toggle" scoped="" ref="0x407e93a8"/>
        <function-ref name="isOutput" scoped="" ref="0x407e9488"/>
        <function-ref name="get" scoped="" ref="0x407e9568"/>
        <function-ref name="makeOutput" scoped="" ref="0x407e9648"/>
        <function-ref name="set" scoped="" ref="0x407e9728"/>
        <function-ref name="clr" scoped="" ref="0x407e9808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404979e8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404979e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40497bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40497ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40497d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40497e60"/>
        <function-ref name="get" scoped="" ref="0x40496010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404960f0"/>
        <function-ref name="set" scoped="" ref="0x404961d0"/>
        <function-ref name="clr" scoped="" ref="0x404962b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40495790" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40495790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40495968"/>
        <function-ref name="isInput" scoped="" ref="0x40495a48"/>
        <function-ref name="toggle" scoped="" ref="0x40495b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40495c08"/>
        <function-ref name="get" scoped="" ref="0x40495ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40495dc8"/>
        <function-ref name="set" scoped="" ref="0x40495ea8"/>
        <function-ref name="clr" scoped="" ref="0x40494010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x404986f8" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x404986f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404988d0"/>
        <function-ref name="isInput" scoped="" ref="0x404989b0"/>
        <function-ref name="toggle" scoped="" ref="0x40498a90"/>
        <function-ref name="isOutput" scoped="" ref="0x40498b70"/>
        <function-ref name="get" scoped="" ref="0x40498c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40498d30"/>
        <function-ref name="set" scoped="" ref="0x40498e10"/>
        <function-ref name="clr" scoped="" ref="0x40498ef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40496410" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40496410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404965e8"/>
        <function-ref name="isInput" scoped="" ref="0x404966c8"/>
        <function-ref name="toggle" scoped="" ref="0x404967a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40496888"/>
        <function-ref name="get" scoped="" ref="0x40496968"/>
        <function-ref name="makeOutput" scoped="" ref="0x40496a48"/>
        <function-ref name="set" scoped="" ref="0x40496b28"/>
        <function-ref name="clr" scoped="" ref="0x40496c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40494170" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40494170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40494348"/>
        <function-ref name="isInput" scoped="" ref="0x40494428"/>
        <function-ref name="toggle" scoped="" ref="0x40494508"/>
        <function-ref name="isOutput" scoped="" ref="0x404945e8"/>
        <function-ref name="get" scoped="" ref="0x404946c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404947a8"/>
        <function-ref name="set" scoped="" ref="0x40494888"/>
        <function-ref name="clr" scoped="" ref="0x40494968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40497090" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40497090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40497268"/>
        <function-ref name="isInput" scoped="" ref="0x40497348"/>
        <function-ref name="toggle" scoped="" ref="0x40497428"/>
        <function-ref name="isOutput" scoped="" ref="0x40497508"/>
        <function-ref name="get" scoped="" ref="0x404975e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404976c8"/>
        <function-ref name="set" scoped="" ref="0x404977a8"/>
        <function-ref name="clr" scoped="" ref="0x40497888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40496d68" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40496d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40495010"/>
        <function-ref name="isInput" scoped="" ref="0x404950f0"/>
        <function-ref name="toggle" scoped="" ref="0x404951d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404952b0"/>
        <function-ref name="get" scoped="" ref="0x40495390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40495470"/>
        <function-ref name="set" scoped="" ref="0x40495550"/>
        <function-ref name="clr" scoped="" ref="0x40495630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40494ac8" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40494ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40494ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40494d80"/>
        <function-ref name="toggle" scoped="" ref="0x40494e60"/>
        <function-ref name="isOutput" scoped="" ref="0x4049f010"/>
        <function-ref name="get" scoped="" ref="0x4049f0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4049f1d0"/>
        <function-ref name="set" scoped="" ref="0x4049f2b0"/>
        <function-ref name="clr" scoped="" ref="0x4049f390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40822418" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40822418"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408225f0"/>
        <function-ref name="isInput" scoped="" ref="0x408226d0"/>
        <function-ref name="toggle" scoped="" ref="0x408227b0"/>
        <function-ref name="isOutput" scoped="" ref="0x40822890"/>
        <function-ref name="get" scoped="" ref="0x40822970"/>
        <function-ref name="makeOutput" scoped="" ref="0x40822a50"/>
        <function-ref name="set" scoped="" ref="0x40822b30"/>
        <function-ref name="clr" scoped="" ref="0x40822c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40821de0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40821de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40820010"/>
        <function-ref name="isInput" scoped="" ref="0x408200f0"/>
        <function-ref name="toggle" scoped="" ref="0x408201d0"/>
        <function-ref name="isOutput" scoped="" ref="0x408202b0"/>
        <function-ref name="get" scoped="" ref="0x40820390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40820470"/>
        <function-ref name="set" scoped="" ref="0x40820550"/>
        <function-ref name="clr" scoped="" ref="0x40820630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4081f7f8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4081f7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4081f9d0"/>
        <function-ref name="isInput" scoped="" ref="0x4081fab0"/>
        <function-ref name="toggle" scoped="" ref="0x4081fb90"/>
        <function-ref name="isOutput" scoped="" ref="0x4081fc70"/>
        <function-ref name="get" scoped="" ref="0x4081fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x4081fe30"/>
        <function-ref name="set" scoped="" ref="0x4081ff10"/>
        <function-ref name="clr" scoped="" ref="0x4081e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4081d228" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4081d228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4081d400"/>
        <function-ref name="isInput" scoped="" ref="0x4081d4e0"/>
        <function-ref name="toggle" scoped="" ref="0x4081d5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x4081d6a0"/>
        <function-ref name="get" scoped="" ref="0x4081d780"/>
        <function-ref name="makeOutput" scoped="" ref="0x4081d860"/>
        <function-ref name="set" scoped="" ref="0x4081d940"/>
        <function-ref name="clr" scoped="" ref="0x4081da20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4081cc08" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4081cc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4081cde0"/>
        <function-ref name="isInput" scoped="" ref="0x4081cec0"/>
        <function-ref name="toggle" scoped="" ref="0x4081b010"/>
        <function-ref name="isOutput" scoped="" ref="0x4081b0f0"/>
        <function-ref name="get" scoped="" ref="0x4081b1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4081b2b0"/>
        <function-ref name="set" scoped="" ref="0x4081b390"/>
        <function-ref name="clr" scoped="" ref="0x4081b470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4081a6c0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4081a6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4081a898"/>
        <function-ref name="isInput" scoped="" ref="0x4081a978"/>
        <function-ref name="toggle" scoped="" ref="0x4081aa58"/>
        <function-ref name="isOutput" scoped="" ref="0x4081ab38"/>
        <function-ref name="get" scoped="" ref="0x4081ac18"/>
        <function-ref name="makeOutput" scoped="" ref="0x4081acf8"/>
        <function-ref name="set" scoped="" ref="0x4081add8"/>
        <function-ref name="clr" scoped="" ref="0x4081aeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408320b0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x408320b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40832288"/>
        <function-ref name="isInput" scoped="" ref="0x40832368"/>
        <function-ref name="toggle" scoped="" ref="0x40832448"/>
        <function-ref name="isOutput" scoped="" ref="0x40832528"/>
        <function-ref name="get" scoped="" ref="0x40832608"/>
        <function-ref name="makeOutput" scoped="" ref="0x408326e8"/>
        <function-ref name="set" scoped="" ref="0x408327c8"/>
        <function-ref name="clr" scoped="" ref="0x408328a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40831a88" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40831a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40831c60"/>
        <function-ref name="isInput" scoped="" ref="0x40831d40"/>
        <function-ref name="toggle" scoped="" ref="0x40831e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40831f00"/>
        <function-ref name="get" scoped="" ref="0x4082f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4082f0f0"/>
        <function-ref name="set" scoped="" ref="0x4082f1d0"/>
        <function-ref name="clr" scoped="" ref="0x4082f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4049a410" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4049a410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4049a5e8"/>
        <function-ref name="isInput" scoped="" ref="0x4049a6c8"/>
        <function-ref name="toggle" scoped="" ref="0x4049a7a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4049a888"/>
        <function-ref name="get" scoped="" ref="0x4049a968"/>
        <function-ref name="makeOutput" scoped="" ref="0x4049aa48"/>
        <function-ref name="set" scoped="" ref="0x4049ab28"/>
        <function-ref name="clr" scoped="" ref="0x4049ac08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x404a4170" loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x404a4170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a4348"/>
        <function-ref name="isInput" scoped="" ref="0x404a4428"/>
        <function-ref name="toggle" scoped="" ref="0x404a4508"/>
        <function-ref name="isOutput" scoped="" ref="0x404a45e8"/>
        <function-ref name="get" scoped="" ref="0x404a46c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a47a8"/>
        <function-ref name="set" scoped="" ref="0x404a4888"/>
        <function-ref name="clr" scoped="" ref="0x404a4968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4049c128" loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4049c128"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4049c300"/>
        <function-ref name="isInput" scoped="" ref="0x4049c3e0"/>
        <function-ref name="toggle" scoped="" ref="0x4049c4c0"/>
        <function-ref name="isOutput" scoped="" ref="0x4049c5a0"/>
        <function-ref name="get" scoped="" ref="0x4049c680"/>
        <function-ref name="makeOutput" scoped="" ref="0x4049c760"/>
        <function-ref name="set" scoped="" ref="0x4049c840"/>
        <function-ref name="clr" scoped="" ref="0x4049c920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4049ad68" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4049ad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a5010"/>
        <function-ref name="isInput" scoped="" ref="0x404a50f0"/>
        <function-ref name="toggle" scoped="" ref="0x404a51d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404a52b0"/>
        <function-ref name="get" scoped="" ref="0x404a5390"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a5470"/>
        <function-ref name="set" scoped="" ref="0x404a5550"/>
        <function-ref name="clr" scoped="" ref="0x404a5630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x404a4ac8" loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x404a4ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a4ca0"/>
        <function-ref name="isInput" scoped="" ref="0x404a4d80"/>
        <function-ref name="toggle" scoped="" ref="0x404a4e60"/>
        <function-ref name="isOutput" scoped="" ref="0x404a3010"/>
        <function-ref name="get" scoped="" ref="0x404a30f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a31d0"/>
        <function-ref name="set" scoped="" ref="0x404a32b0"/>
        <function-ref name="clr" scoped="" ref="0x404a3390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4049ca80" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4049ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4049cc58"/>
        <function-ref name="isInput" scoped="" ref="0x4049cd38"/>
        <function-ref name="toggle" scoped="" ref="0x4049ce18"/>
        <function-ref name="isOutput" scoped="" ref="0x4049cef8"/>
        <function-ref name="get" scoped="" ref="0x4049a010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4049a0f0"/>
        <function-ref name="set" scoped="" ref="0x4049a1d0"/>
        <function-ref name="clr" scoped="" ref="0x4049a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x404a5790" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x404a5790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a5968"/>
        <function-ref name="isInput" scoped="" ref="0x404a5a48"/>
        <function-ref name="toggle" scoped="" ref="0x404a5b28"/>
        <function-ref name="isOutput" scoped="" ref="0x404a5c08"/>
        <function-ref name="get" scoped="" ref="0x404a5ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a5dc8"/>
        <function-ref name="set" scoped="" ref="0x404a5ea8"/>
        <function-ref name="clr" scoped="" ref="0x404a4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x404a34f0" loc="42:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x404a34f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404a36c8"/>
        <function-ref name="isInput" scoped="" ref="0x404a37a8"/>
        <function-ref name="toggle" scoped="" ref="0x404a3888"/>
        <function-ref name="isOutput" scoped="" ref="0x404a3968"/>
        <function-ref name="get" scoped="" ref="0x404a3a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a3b28"/>
        <function-ref name="set" scoped="" ref="0x404a3c08"/>
        <function-ref name="clr" scoped="" ref="0x404a3ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40856de8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40856de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40851010"/>
        <function-ref name="isInput" scoped="" ref="0x408510f0"/>
        <function-ref name="toggle" scoped="" ref="0x408511d0"/>
        <function-ref name="isOutput" scoped="" ref="0x408512b0"/>
        <function-ref name="get" scoped="" ref="0x40851390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40851470"/>
        <function-ref name="set" scoped="" ref="0x40851550"/>
        <function-ref name="clr" scoped="" ref="0x40851630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408507f8" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x408507f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408509d0"/>
        <function-ref name="isInput" scoped="" ref="0x40850ab0"/>
        <function-ref name="toggle" scoped="" ref="0x40850b90"/>
        <function-ref name="isOutput" scoped="" ref="0x40850c70"/>
        <function-ref name="get" scoped="" ref="0x40850d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40850e30"/>
        <function-ref name="set" scoped="" ref="0x40850f10"/>
        <function-ref name="clr" scoped="" ref="0x4084f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4084e228" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4084e228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4084e400"/>
        <function-ref name="isInput" scoped="" ref="0x4084e4e0"/>
        <function-ref name="toggle" scoped="" ref="0x4084e5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x4084e6a0"/>
        <function-ref name="get" scoped="" ref="0x4084e780"/>
        <function-ref name="makeOutput" scoped="" ref="0x4084e860"/>
        <function-ref name="set" scoped="" ref="0x4084e940"/>
        <function-ref name="clr" scoped="" ref="0x4084ea20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40867c08" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40867c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40867de0"/>
        <function-ref name="isInput" scoped="" ref="0x40867ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40866010"/>
        <function-ref name="isOutput" scoped="" ref="0x408660f0"/>
        <function-ref name="get" scoped="" ref="0x408661d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408662b0"/>
        <function-ref name="set" scoped="" ref="0x40866390"/>
        <function-ref name="clr" scoped="" ref="0x40866470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408656c0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x408656c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40865898"/>
        <function-ref name="isInput" scoped="" ref="0x40865978"/>
        <function-ref name="toggle" scoped="" ref="0x40865a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40865b38"/>
        <function-ref name="get" scoped="" ref="0x40865c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40865cf8"/>
        <function-ref name="set" scoped="" ref="0x40865dd8"/>
        <function-ref name="clr" scoped="" ref="0x40865eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x408630b0" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x408630b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40863288"/>
        <function-ref name="isInput" scoped="" ref="0x40863368"/>
        <function-ref name="toggle" scoped="" ref="0x40863448"/>
        <function-ref name="isOutput" scoped="" ref="0x40863528"/>
        <function-ref name="get" scoped="" ref="0x40863608"/>
        <function-ref name="makeOutput" scoped="" ref="0x408636e8"/>
        <function-ref name="set" scoped="" ref="0x408637c8"/>
        <function-ref name="clr" scoped="" ref="0x408638a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40862a88" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40862a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40862c60"/>
        <function-ref name="isInput" scoped="" ref="0x40862d40"/>
        <function-ref name="toggle" scoped="" ref="0x40862e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40862f00"/>
        <function-ref name="get" scoped="" ref="0x40861010"/>
        <function-ref name="makeOutput" scoped="" ref="0x408610f0"/>
        <function-ref name="set" scoped="" ref="0x408611d0"/>
        <function-ref name="clr" scoped="" ref="0x408612b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40860538" loc="37:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40860538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40860710"/>
        <function-ref name="isInput" scoped="" ref="0x408607f0"/>
        <function-ref name="toggle" scoped="" ref="0x408608d0"/>
        <function-ref name="isOutput" scoped="" ref="0x408609b0"/>
        <function-ref name="get" scoped="" ref="0x40860a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40860b70"/>
        <function-ref name="set" scoped="" ref="0x40860c50"/>
        <function-ref name="clr" scoped="" ref="0x40860d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404ab6f8" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404ab6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ab8d0"/>
        <function-ref name="isInput" scoped="" ref="0x404ab9b0"/>
        <function-ref name="toggle" scoped="" ref="0x404aba90"/>
        <function-ref name="isOutput" scoped="" ref="0x404abb70"/>
        <function-ref name="get" scoped="" ref="0x404abc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x404abd30"/>
        <function-ref name="set" scoped="" ref="0x404abe10"/>
        <function-ref name="clr" scoped="" ref="0x404abef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404b5e98" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404b5e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b40c0"/>
        <function-ref name="isInput" scoped="" ref="0x404b41a0"/>
        <function-ref name="toggle" scoped="" ref="0x404b4280"/>
        <function-ref name="isOutput" scoped="" ref="0x404b4360"/>
        <function-ref name="get" scoped="" ref="0x404b4440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b4520"/>
        <function-ref name="set" scoped="" ref="0x404b4600"/>
        <function-ref name="clr" scoped="" ref="0x404b46e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404bd6c0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404bd6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bd898"/>
        <function-ref name="isInput" scoped="" ref="0x404bd978"/>
        <function-ref name="toggle" scoped="" ref="0x404bda58"/>
        <function-ref name="isOutput" scoped="" ref="0x404bdb38"/>
        <function-ref name="get" scoped="" ref="0x404bdc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bdcf8"/>
        <function-ref name="set" scoped="" ref="0x404bddd8"/>
        <function-ref name="clr" scoped="" ref="0x404bdeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404bbe98" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404bbe98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ba0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404ba1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404ba280"/>
        <function-ref name="isOutput" scoped="" ref="0x404ba360"/>
        <function-ref name="get" scoped="" ref="0x404ba440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ba520"/>
        <function-ref name="set" scoped="" ref="0x404ba600"/>
        <function-ref name="clr" scoped="" ref="0x404ba6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404b86c0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404b86c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b8898"/>
        <function-ref name="isInput" scoped="" ref="0x404b8978"/>
        <function-ref name="toggle" scoped="" ref="0x404b8a58"/>
        <function-ref name="isOutput" scoped="" ref="0x404b8b38"/>
        <function-ref name="get" scoped="" ref="0x404b8c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b8cf8"/>
        <function-ref name="set" scoped="" ref="0x404b8dd8"/>
        <function-ref name="clr" scoped="" ref="0x404b8eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404c1e98" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404c1e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c00c0"/>
        <function-ref name="isInput" scoped="" ref="0x404c01a0"/>
        <function-ref name="toggle" scoped="" ref="0x404c0280"/>
        <function-ref name="isOutput" scoped="" ref="0x404c0360"/>
        <function-ref name="get" scoped="" ref="0x404c0440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c0520"/>
        <function-ref name="set" scoped="" ref="0x404c0600"/>
        <function-ref name="clr" scoped="" ref="0x404c06e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404be728" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404be728"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404be900"/>
        <function-ref name="isInput" scoped="" ref="0x404be9e0"/>
        <function-ref name="toggle" scoped="" ref="0x404beac0"/>
        <function-ref name="isOutput" scoped="" ref="0x404beba0"/>
        <function-ref name="get" scoped="" ref="0x404bec80"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bed60"/>
        <function-ref name="set" scoped="" ref="0x404bee40"/>
        <function-ref name="clr" scoped="" ref="0x404bef20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404c7ec0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404c7ec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c60c0"/>
        <function-ref name="isInput" scoped="" ref="0x404c61a0"/>
        <function-ref name="toggle" scoped="" ref="0x404c6280"/>
        <function-ref name="isOutput" scoped="" ref="0x404c6360"/>
        <function-ref name="get" scoped="" ref="0x404c6440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c6520"/>
        <function-ref name="set" scoped="" ref="0x404c6600"/>
        <function-ref name="clr" scoped="" ref="0x404c66e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404c46c0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404c46c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c4898"/>
        <function-ref name="isInput" scoped="" ref="0x404c4978"/>
        <function-ref name="toggle" scoped="" ref="0x404c4a58"/>
        <function-ref name="isOutput" scoped="" ref="0x404c4b38"/>
        <function-ref name="get" scoped="" ref="0x404c4c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c4cf8"/>
        <function-ref name="set" scoped="" ref="0x404c4dd8"/>
        <function-ref name="clr" scoped="" ref="0x404c4eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404cee98" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404cee98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404cd0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404cd1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404cd280"/>
        <function-ref name="isOutput" scoped="" ref="0x404cd360"/>
        <function-ref name="get" scoped="" ref="0x404cd440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cd520"/>
        <function-ref name="set" scoped="" ref="0x404cd600"/>
        <function-ref name="clr" scoped="" ref="0x404cd6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404ca6c0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404ca6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ca898"/>
        <function-ref name="isInput" scoped="" ref="0x404ca978"/>
        <function-ref name="toggle" scoped="" ref="0x404caa58"/>
        <function-ref name="isOutput" scoped="" ref="0x404cab38"/>
        <function-ref name="get" scoped="" ref="0x404cac18"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cacf8"/>
        <function-ref name="set" scoped="" ref="0x404cadd8"/>
        <function-ref name="clr" scoped="" ref="0x404caeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404d4e98" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404d4e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d30c0"/>
        <function-ref name="isInput" scoped="" ref="0x404d31a0"/>
        <function-ref name="toggle" scoped="" ref="0x404d3280"/>
        <function-ref name="isOutput" scoped="" ref="0x404d3360"/>
        <function-ref name="get" scoped="" ref="0x404d3440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d3520"/>
        <function-ref name="set" scoped="" ref="0x404d3600"/>
        <function-ref name="clr" scoped="" ref="0x404d36e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x404d06c0" loc="38:/opt/tinyos-2.1.1/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x404d06c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d0898"/>
        <function-ref name="isInput" scoped="" ref="0x404d0978"/>
        <function-ref name="toggle" scoped="" ref="0x404d0a58"/>
        <function-ref name="isOutput" scoped="" ref="0x404d0b38"/>
        <function-ref name="get" scoped="" ref="0x404d0c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d0cf8"/>
        <function-ref name="set" scoped="" ref="0x404d0dd8"/>
        <function-ref name="clr" scoped="" ref="0x404d0eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x404f64d0" loc="50:/opt/tinyos-2.1.1/tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x404f64d0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x4034b7d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x4034b7d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404f66a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x404f6880" loc="51:/opt/tinyos-2.1.1/tos/platforms/iris/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x404f6880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x404f6a58"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x404f6b38"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x404f6c18"/>
        <function-ref name="actualMicro" scoped="" ref="0x404f6cf8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x404f6dd8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x4050d030" loc="49:/opt/tinyos-2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x4050d030"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4050d208"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x404ea2b8" loc="46:/opt/tinyos-2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x404ea2b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x404ea490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x404eac18" loc="48:/opt/tinyos-2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404eac18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404eadf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x404ea650" loc="47:/opt/tinyos-2.1.1/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x404ea650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404ea828"/>
        <function-ref name="taskLoop" scoped="" ref="0x404ea908"/>
        <function-ref name="runNextTask" scoped="" ref="0x404ea9e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x40354600" loc="37:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x40354600"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403547d8"/>
        <function-ref name="runTask" scoped="" ref="0x403548b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x4034eed8" loc="36:/opt/tinyos-2.1.1/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x4034eed8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4034a0c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x4034a1a0"/>
        <function-ref name="runNextTask" scoped="" ref="0x4034a280"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x403d3670" loc="45:/opt/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x403d3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403d3848"/>
        <function-ref name="runTask" scoped="" ref="0x403d3928"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x403d8310" loc="46:/opt/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x403d8310"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x403d84e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x403d4df8" loc="44:/opt/tinyos-2.1.1/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x403d4df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403d3010"/>
        <function-ref name="taskLoop" scoped="" ref="0x403d30f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x403d31d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x403e7e88" loc="69:/opt/tinyos-2.1.1/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x403e7e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x403e9070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x40349c28" loc="65:/opt/tinyos-2.1.1/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x40349c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x40349e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x403e28f8" loc="66:/opt/tinyos-2.1.1/tos/chips/atm1281/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x403e28f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x403e2ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x40417d50" loc="35:/opt/tinyos-2.1.1/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40417d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40417f28"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40508018"/>
        <function-ref name="led1On" scoped="" ref="0x405080f8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405081d8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405082b8"/>
        <function-ref name="get" scoped="" ref="0x40508398"/>
        <function-ref name="led1Off" scoped="" ref="0x40508478"/>
        <function-ref name="led2Off" scoped="" ref="0x405087f8"/>
        <function-ref name="set" scoped="" ref="0x40508558"/>
        <function-ref name="led0On" scoped="" ref="0x40508638"/>
        <function-ref name="led2On" scoped="" ref="0x40508718"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x405120b0" loc="39:/opt/tinyos-2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405120b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40512288"/>
        <function-ref name="isInput" scoped="" ref="0x40512368"/>
        <function-ref name="toggle" scoped="" ref="0x40512448"/>
        <function-ref name="isOutput" scoped="" ref="0x40512528"/>
        <function-ref name="get" scoped="" ref="0x40512608"/>
        <function-ref name="makeOutput" scoped="" ref="0x405126e8"/>
        <function-ref name="set" scoped="" ref="0x405127c8"/>
        <function-ref name="clr" scoped="" ref="0x405128a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40513090" loc="35:/opt/tinyos-2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40513090"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40513268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x40512a98" loc="40:/opt/tinyos-2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x40512a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40512c70"/>
        <function-ref name="isInput" scoped="" ref="0x40512d50"/>
        <function-ref name="toggle" scoped="" ref="0x40512e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40512f10"/>
        <function-ref name="get" scoped="" ref="0x40511010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405110f0"/>
        <function-ref name="set" scoped="" ref="0x405111d0"/>
        <function-ref name="clr" scoped="" ref="0x405112b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x405133d8" loc="36:/opt/tinyos-2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405133d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405135b0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40513690"/>
        <function-ref name="led1On" scoped="" ref="0x40513770"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40513850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40513930"/>
        <function-ref name="get" scoped="" ref="0x40513a10"/>
        <function-ref name="led1Off" scoped="" ref="0x40513af0"/>
        <function-ref name="led2Off" scoped="" ref="0x40513e70"/>
        <function-ref name="set" scoped="" ref="0x40513bd0"/>
        <function-ref name="led0On" scoped="" ref="0x40513cb0"/>
        <function-ref name="led2On" scoped="" ref="0x40513d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x405114a0" loc="41:/opt/tinyos-2.1.1/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405114a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40511678"/>
        <function-ref name="isInput" scoped="" ref="0x40511758"/>
        <function-ref name="toggle" scoped="" ref="0x40511838"/>
        <function-ref name="isOutput" scoped="" ref="0x40511918"/>
        <function-ref name="get" scoped="" ref="0x405119f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40511ad8"/>
        <function-ref name="set" scoped="" ref="0x40511bb8"/>
        <function-ref name="clr" scoped="" ref="0x40511c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x4051d8e8" loc="35:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x4051d8e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051dac0"/>
        <function-ref name="isInput" scoped="" ref="0x4051dba0"/>
        <function-ref name="toggle" scoped="" ref="0x4051dc80"/>
        <function-ref name="isOutput" scoped="" ref="0x4051dd60"/>
        <function-ref name="get" scoped="" ref="0x4051de40"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051df20"/>
        <function-ref name="set" scoped="" ref="0x4051c018"/>
        <function-ref name="clr" scoped="" ref="0x4051c0f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x4051c308" loc="36:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x4051c308"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051c4e0"/>
        <function-ref name="isInput" scoped="" ref="0x4051c5c0"/>
        <function-ref name="toggle" scoped="" ref="0x4051c6a0"/>
        <function-ref name="isOutput" scoped="" ref="0x4051c780"/>
        <function-ref name="get" scoped="" ref="0x4051c860"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051c940"/>
        <function-ref name="set" scoped="" ref="0x4051ca20"/>
        <function-ref name="clr" scoped="" ref="0x4051cb00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x405296e0" loc="38:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405296e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405298b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x4051cd10" loc="37:/opt/tinyos-2.1.1/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x4051cd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051cee8"/>
        <function-ref name="isInput" scoped="" ref="0x40529010"/>
        <function-ref name="toggle" scoped="" ref="0x405290f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405291d0"/>
        <function-ref name="get" scoped="" ref="0x405292b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40529390"/>
        <function-ref name="set" scoped="" ref="0x40529470"/>
        <function-ref name="clr" scoped="" ref="0x40529550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40527660" loc="37:/opt/tinyos-2.1.1/tos/system/TimerMilliC.nc">
      <component-ref qname="SenseAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40527660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40625170"/>
        <function-ref name="fired" scoped="" ref="0x405263f8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40526b00"/>
        <function-ref name="isOneShot" scoped="" ref="0x405268a8"/>
        <function-ref name="getdt" scoped="" ref="0x40625620"/>
        <function-ref name="gett0" scoped="" ref="0x406253c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40526650"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40527c88"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40526e20"/>
        <function-ref name="startOneShot" scoped="" ref="0x40527f08"/>
        <function-ref name="stop" scoped="" ref="0x405261a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x4052e670" loc="38:/opt/tinyos-2.1.1/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x4052e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4052c170"/>
        <function-ref name="fired" scoped="" ref="0x4052d408"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4052db10"/>
        <function-ref name="isOneShot" scoped="" ref="0x4052d8b8"/>
        <function-ref name="getdt" scoped="" ref="0x4052c620"/>
        <function-ref name="gett0" scoped="" ref="0x4052c3c8"/>
        <function-ref name="isRunning" scoped="" ref="0x4052d660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4052ec98"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4052de30"/>
        <function-ref name="startOneShot" scoped="" ref="0x4052ef18"/>
        <function-ref name="stop" scoped="" ref="0x4052d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40536698" loc="35:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40536698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40534248"/>
        <function-ref name="fired" scoped="" ref="0x405354e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40535bf0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40535998"/>
        <function-ref name="getdt" scoped="" ref="0x405346f8"/>
        <function-ref name="gett0" scoped="" ref="0x405344a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40535740"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40536cc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40535f10"/>
        <function-ref name="startOneShot" scoped="" ref="0x40535010"/>
        <function-ref name="stop" scoped="" ref="0x40535290"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x4053e710" loc="36:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x4053e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4053ed58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4052cea0" loc="34:/opt/tinyos-2.1.1/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4052cea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405360c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x40543010" loc="29:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x40543010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40543760"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40543c50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x405439d8"/>
        <function-ref name="overflow" scoped="" ref="0x40543ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40532dd8" loc="27:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40532dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4053c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x40544610" loc="28:/opt/tinyos-2.1.1/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x40544610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4053bab8"/>
        <function-ref name="fired" scoped="" ref="0x4053b288"/>
        <function-ref name="startAt" scoped="" ref="0x4053b778"/>
        <function-ref name="isRunning" scoped="" ref="0x4053b500"/>
        <function-ref name="getAlarm" scoped="" ref="0x4053bd30"/>
        <function-ref name="start" scoped="" ref="0x40544d60"/>
        <function-ref name="stop" scoped="" ref="0x4053b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x405d3850" loc="50:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x405d3850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405d2d58"/>
        <function-ref name="fired" scoped="" ref="0x405d2528"/>
        <function-ref name="startAt" scoped="" ref="0x405d2a18"/>
        <function-ref name="isRunning" scoped="" ref="0x405d27a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x405d1010"/>
        <function-ref name="start" scoped="" ref="0x405d2010"/>
        <function-ref name="stop" scoped="" ref="0x405d22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405d3418" loc="49:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405d3418"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x4034b5d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x4034b5d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405d35f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x405d1340" loc="51:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x405d1340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x405d1a90"/>
        <function-ref name="clearOverflow" scoped="" ref="0x405cf010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x405d1d08"/>
        <function-ref name="overflow" scoped="" ref="0x405cf288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x408c9a78" loc="55:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x408c9a78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x408c9c50"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x408c9d30"/>
        <function-ref name="getControlA" scoped="" ref="0x408c9e10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x408c9ef0"/>
        <function-ref name="setControlB" scoped="" ref="0x408c8010"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x408c80f0"/>
        <function-ref name="getControlB" scoped="" ref="0x408c81d0"/>
        <function-ref name="setControlA" scoped="" ref="0x408c82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x408d0c90" loc="50:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x408d0c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408cd150"/>
        <function-ref name="fired" scoped="" ref="0x408cf908"/>
        <function-ref name="startAt" scoped="" ref="0x408cfdf8"/>
        <function-ref name="isRunning" scoped="" ref="0x408cfb80"/>
        <function-ref name="getAlarm" scoped="" ref="0x408cd3c8"/>
        <function-ref name="start" scoped="" ref="0x408cf3f0"/>
        <function-ref name="stop" scoped="" ref="0x408cf690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408d0858" loc="49:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408d0858"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408d0a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x408cd6f8" loc="51:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x408cd6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408cde48"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408cc350"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408cc0d8"/>
        <function-ref name="overflow" scoped="" ref="0x408cc5c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x408e8e98" loc="57:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x408e8e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x408e70c0"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x408e71a0"/>
        <function-ref name="controlABusy" scoped="" ref="0x408e7280"/>
        <function-ref name="controlBBusy" scoped="" ref="0x408e7360"/>
        <function-ref name="countBusy" scoped="" ref="0x408e7440"/>
        <function-ref name="compareABusy" scoped="" ref="0x408e7520"/>
        <function-ref name="getAssr" scoped="" ref="0x408e7600"/>
        <function-ref name="setAssr" scoped="" ref="0x408e76e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x408c84a0" loc="56:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x408c84a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x408e89f0"/>
        <function-ref name="fired" scoped="" ref="0x408e8010"/>
        <function-ref name="get" scoped="" ref="0x408c8ae8"/>
        <function-ref name="reset" scoped="" ref="0x408e8288"/>
        <function-ref name="isOn" scoped="" ref="0x408e8c68"/>
        <function-ref name="set" scoped="" ref="0x408c8d60"/>
        <function-ref name="start" scoped="" ref="0x408e8500"/>
        <function-ref name="stop" scoped="" ref="0x408e8778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x408cc8b8" loc="54:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/Atm1281AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm1281AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x408cc8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x408c9330"/>
        <function-ref name="test" scoped="" ref="0x408cbe20"/>
        <function-ref name="get" scoped="" ref="0x408ccf00"/>
        <function-ref name="setScale" scoped="" ref="0x408c95a8"/>
        <function-ref name="getScale" scoped="" ref="0x408c9848"/>
        <function-ref name="reset" scoped="" ref="0x408cb6b8"/>
        <function-ref name="overflow" scoped="" ref="0x408cb440"/>
        <function-ref name="isOn" scoped="" ref="0x408c90b8"/>
        <function-ref name="set" scoped="" ref="0x408cb1a0"/>
        <function-ref name="start" scoped="" ref="0x408cb930"/>
        <function-ref name="stop" scoped="" ref="0x408cbba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40591878" loc="71:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40591878"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40591a50"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40591b30"/>
        <function-ref name="getControlA" scoped="" ref="0x40591c10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40591cf0"/>
        <function-ref name="setControlB" scoped="" ref="0x40591dd0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40591eb0"/>
        <function-ref name="getControlB" scoped="" ref="0x40590010"/>
        <function-ref name="setControlA" scoped="" ref="0x405900f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x4059d010" loc="73:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x4059d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x4059d1e8"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x4059d2c8"/>
        <function-ref name="controlABusy" scoped="" ref="0x4059d3a8"/>
        <function-ref name="controlBBusy" scoped="" ref="0x4059d488"/>
        <function-ref name="countBusy" scoped="" ref="0x4059d568"/>
        <function-ref name="compareABusy" scoped="" ref="0x4059d648"/>
        <function-ref name="getAssr" scoped="" ref="0x4059d728"/>
        <function-ref name="setAssr" scoped="" ref="0x4059d808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40590418" loc="72:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40590418"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4058f9f0"/>
        <function-ref name="fired" scoped="" ref="0x4058f010"/>
        <function-ref name="get" scoped="" ref="0x40590a60"/>
        <function-ref name="reset" scoped="" ref="0x4058f288"/>
        <function-ref name="isOn" scoped="" ref="0x4058fc68"/>
        <function-ref name="set" scoped="" ref="0x40590cd8"/>
        <function-ref name="start" scoped="" ref="0x4058f500"/>
        <function-ref name="stop" scoped="" ref="0x4058f778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40594540" loc="70:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncC.nc">
      <component-ref qname="HplAtm1281Timer2AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40594540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40591010"/>
        <function-ref name="test" scoped="" ref="0x40592a98"/>
        <function-ref name="get" scoped="" ref="0x40594b88"/>
        <function-ref name="setScale" scoped="" ref="0x40591288"/>
        <function-ref name="getScale" scoped="" ref="0x40591528"/>
        <function-ref name="reset" scoped="" ref="0x40592330"/>
        <function-ref name="overflow" scoped="" ref="0x405920b8"/>
        <function-ref name="isOn" scoped="" ref="0x40592d10"/>
        <function-ref name="set" scoped="" ref="0x40594e00"/>
        <function-ref name="start" scoped="" ref="0x405925a8"/>
        <function-ref name="stop" scoped="" ref="0x40592820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x405988d0" loc="63:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x405988d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40598aa8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40598b88"/>
        <function-ref name="getControlA" scoped="" ref="0x40598c68"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40598d48"/>
        <function-ref name="setControlB" scoped="" ref="0x40598e28"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40598f08"/>
        <function-ref name="getControlB" scoped="" ref="0x40597010"/>
        <function-ref name="setControlA" scoped="" ref="0x405970f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x405a5f20" loc="65:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x405a5f20"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x405a4110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x405a4398" loc="66:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x405a4398"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="compareBBusy" scoped="" ref="0x405a4570"/>
        <function-ref name="setTimer2Asynchronous" scoped="" ref="0x405a4650"/>
        <function-ref name="controlABusy" scoped="" ref="0x405a4730"/>
        <function-ref name="controlBBusy" scoped="" ref="0x405a4810"/>
        <function-ref name="countBusy" scoped="" ref="0x405a48f0"/>
        <function-ref name="compareABusy" scoped="" ref="0x405a49d0"/>
        <function-ref name="getAssr" scoped="" ref="0x405a4ab0"/>
        <function-ref name="setAssr" scoped="" ref="0x405a4b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40597418" loc="64:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40597418"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x405a59f0"/>
        <function-ref name="fired" scoped="" ref="0x405a5010"/>
        <function-ref name="get" scoped="" ref="0x40597a60"/>
        <function-ref name="reset" scoped="" ref="0x405a5288"/>
        <function-ref name="isOn" scoped="" ref="0x405a5c68"/>
        <function-ref name="set" scoped="" ref="0x40597cd8"/>
        <function-ref name="start" scoped="" ref="0x405a5500"/>
        <function-ref name="stop" scoped="" ref="0x405a5778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4059a5f8" loc="62:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm1281Timer2AsyncP.nc">
      <component-ref qname="HplAtm1281Timer2AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4059a5f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40598068"/>
        <function-ref name="test" scoped="" ref="0x40599b50"/>
        <function-ref name="get" scoped="" ref="0x4059ac40"/>
        <function-ref name="setScale" scoped="" ref="0x405982e0"/>
        <function-ref name="getScale" scoped="" ref="0x40598580"/>
        <function-ref name="reset" scoped="" ref="0x405993e8"/>
        <function-ref name="overflow" scoped="" ref="0x40599170"/>
        <function-ref name="isOn" scoped="" ref="0x40599dc8"/>
        <function-ref name="set" scoped="" ref="0x4059aeb8"/>
        <function-ref name="start" scoped="" ref="0x40599660"/>
        <function-ref name="stop" scoped="" ref="0x405998d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x405f44d8" loc="63:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x405f44d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x405f46b0"/>
        <function-ref name="runTask" scoped="" ref="0x405f4790"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x405e7a48" loc="38:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x405e7a48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405f4010"/>
        <function-ref name="fired" scoped="" ref="0x405f5718"/>
        <function-ref name="startAt" scoped="" ref="0x405f5c08"/>
        <function-ref name="isRunning" scoped="" ref="0x405f5990"/>
        <function-ref name="getAlarm" scoped="" ref="0x405f4288"/>
        <function-ref name="start" scoped="" ref="0x405f5200"/>
        <function-ref name="stop" scoped="" ref="0x405f54a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4053d720" loc="37:/opt/tinyos-2.1.1/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4053d720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x405e7248"/>
        <function-ref name="fired" scoped="" ref="0x405e84e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x405e8bf0"/>
        <function-ref name="isOneShot" scoped="" ref="0x405e8998"/>
        <function-ref name="getdt" scoped="" ref="0x405e76f8"/>
        <function-ref name="gett0" scoped="" ref="0x405e74a0"/>
        <function-ref name="isRunning" scoped="" ref="0x405e8740"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4053dd48"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x405e8f10"/>
        <function-ref name="startOneShot" scoped="" ref="0x405e8010"/>
        <function-ref name="stop" scoped="" ref="0x405e8290"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x4061fbc8" loc="60:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x4061fbc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4061fda0"/>
        <function-ref name="runTask" scoped="" ref="0x4061fe80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x40610968" loc="38:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x40610968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4061f4c8"/>
        <function-ref name="fired" scoped="" ref="0x40620768"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40620e70"/>
        <function-ref name="isOneShot" scoped="" ref="0x40620c18"/>
        <function-ref name="getdt" scoped="" ref="0x4061f978"/>
        <function-ref name="gett0" scoped="" ref="0x4061f720"/>
        <function-ref name="isRunning" scoped="" ref="0x406209c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40620010"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4061f1a8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40620290"/>
        <function-ref name="stop" scoped="" ref="0x40620510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x405f1600" loc="37:/opt/tinyos-2.1.1/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x405f1600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x406101a8"/>
        <function-ref name="fired" scoped="" ref="0x406113d8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40611b10"/>
        <function-ref name="isOneShot" scoped="" ref="0x406118a8"/>
        <function-ref name="getdt" scoped="" ref="0x40610678"/>
        <function-ref name="gett0" scoped="" ref="0x40610410"/>
        <function-ref name="isRunning" scoped="" ref="0x40611640"/>
        <function-ref name="startPeriodic" scoped="" ref="0x405f1c38"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40611e40"/>
        <function-ref name="startOneShot" scoped="" ref="0x405f1ec8"/>
        <function-ref name="stop" scoped="" ref="0x40611170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x4061d348" loc="37:/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x4061d348"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4061d990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x4061dce0" loc="38:/opt/tinyos-2.1.1/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4061dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403a8590"/>
            <typename><typedef-ref name="TMilli" ref="0x403a8758"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40628478"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40628968"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x406286f0"/>
        <function-ref name="overflow" scoped="" ref="0x40628be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40631b58" loc="21:/opt/tinyos-2.1.1/tos/platforms/micaz/DemoSensorC.nc">
      <component-ref qname="SenseAppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40631b58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406231e0"/>
        <function-ref name="readDone" scoped="" ref="0x40623438"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x4090a9a8" loc="31:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageC.nc">
      <component-ref qname="SenseAppC.Sensor.DemoChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4090a9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40909010"/>
        <function-ref name="readDone" scoped="" ref="0x40909268"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40907310" loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="SenseAppC.Sensor.DemoChannel.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40907310"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x409074e8"/>
        <function-ref name="configure" scoped="" ref="0x409075c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x409081d0" loc="22:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="SenseAppC.Sensor.DemoChannel.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x409081d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x409087f8"/>
        <function-ref name="readDone" scoped="" ref="0x40908a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x40908d58" loc="24:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="SenseAppC.Sensor.DemoChannel.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40908d58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40907010"/>
        <function-ref name="getChannel" scoped="" ref="0x409070f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x409071d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40639e88" loc="18:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40639e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406384d8"/>
        <function-ref name="readDone" scoped="" ref="0x40638730"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x406372f0" loc="19:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x406372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40637938"/>
        <function-ref name="readDone" scoped="" ref="0x40637bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x40636280" loc="22:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40636280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40636458"/>
        <function-ref name="getChannel" scoped="" ref="0x40636538"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40636618"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40642b68" loc="23:/opt/tinyos-2.1.1/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40642b68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40642d40"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40642e20"/>
        <function-ref name="request" scoped="" ref="0x40642f00"/>
        <function-ref name="granted" scoped="" ref="0x40645010"/>
        <function-ref name="isOwner" scoped="" ref="0x406450f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x4063e100" loc="49:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x4063e100"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x4063e2d8"/>
        <function-ref name="configure" scoped="" ref="0x4063e3b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x4064a870" loc="47:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x4064a870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4064aa48"/>
        <function-ref name="dataReady" scoped="" ref="0x4064ab28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x4064d540" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4064d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x4064d718"/>
        <function-ref name="cancel" scoped="" ref="0x4064d7f8"/>
        <function-ref name="dataReady" scoped="" ref="0x4064d8d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40645b38" loc="45:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40645b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40645d10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40645df0"/>
        <function-ref name="request" scoped="" ref="0x40645ed0"/>
        <function-ref name="granted" scoped="" ref="0x4063f010"/>
        <function-ref name="isOwner" scoped="" ref="0x4063f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4063ed70" loc="87:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4063ed70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40647010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x40656c30" loc="90:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40656c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40656e08"/>
        <function-ref name="dataReady" scoped="" ref="0x40656ee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x406566a8" loc="89:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406566a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40656880"/>
        <function-ref name="cancel" scoped="" ref="0x40656960"/>
        <function-ref name="dataReady" scoped="" ref="0x40656a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x40660498" loc="93:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40660498"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40660670"/>
        <function-ref name="getAdmux" scoped="" ref="0x40660750"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40660830"/>
        <function-ref name="isEnabled" scoped="" ref="0x40660910"/>
        <function-ref name="enableAdc" scoped="" ref="0x406609f0"/>
        <function-ref name="setAdmux" scoped="" ref="0x40660ad0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40660bb0"/>
        <function-ref name="isComplete" scoped="" ref="0x40660c90"/>
        <function-ref name="cancel" scoped="" ref="0x40660d70"/>
        <function-ref name="disableAdc" scoped="" ref="0x40660e50"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40657010"/>
        <function-ref name="disableInterruption" scoped="" ref="0x406570f0"/>
        <function-ref name="startConversion" scoped="" ref="0x406571d0"/>
        <function-ref name="isStarted" scoped="" ref="0x40657330"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40657410"/>
        <function-ref name="setContinuous" scoped="" ref="0x406574f0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x406575d0"/>
        <function-ref name="getValue" scoped="" ref="0x406576b0"/>
        <function-ref name="dataReady" scoped="" ref="0x40657790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x40656218" loc="88:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40656218"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406563f0"/>
        <function-ref name="stop" scoped="" ref="0x406564d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x40657968" loc="94:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40657968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40657b40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40657c20"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40657d00"/>
        <function-ref name="actualMicro" scoped="" ref="0x40657de0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40657ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x4063d9f8" loc="36:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x4063d9f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x4063dbd0"/>
        <function-ref name="getAdmux" scoped="" ref="0x4063dcb0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x4063dd90"/>
        <function-ref name="isEnabled" scoped="" ref="0x4063de70"/>
        <function-ref name="enableAdc" scoped="" ref="0x40678010"/>
        <function-ref name="setAdmux" scoped="" ref="0x406780f0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x406781d0"/>
        <function-ref name="isComplete" scoped="" ref="0x406782b0"/>
        <function-ref name="cancel" scoped="" ref="0x40678390"/>
        <function-ref name="disableAdc" scoped="" ref="0x40678470"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40678550"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40678630"/>
        <function-ref name="startConversion" scoped="" ref="0x40678710"/>
        <function-ref name="isStarted" scoped="" ref="0x40678870"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40678950"/>
        <function-ref name="setContinuous" scoped="" ref="0x40678a30"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40678b10"/>
        <function-ref name="getValue" scoped="" ref="0x40678bf0"/>
        <function-ref name="dataReady" scoped="" ref="0x40678cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x40677738" loc="59:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40677738"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40677910"/>
        <function-ref name="getAdmux" scoped="" ref="0x406779f0"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40677ad0"/>
        <function-ref name="isEnabled" scoped="" ref="0x40677bb0"/>
        <function-ref name="enableAdc" scoped="" ref="0x40677c90"/>
        <function-ref name="setAdmux" scoped="" ref="0x40677d70"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40677e50"/>
        <function-ref name="isComplete" scoped="" ref="0x40674010"/>
        <function-ref name="cancel" scoped="" ref="0x406740f0"/>
        <function-ref name="disableAdc" scoped="" ref="0x406741d0"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x406742b0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40674390"/>
        <function-ref name="startConversion" scoped="" ref="0x40674470"/>
        <function-ref name="isStarted" scoped="" ref="0x406745d0"/>
        <function-ref name="setAdcsra" scoped="" ref="0x406746b0"/>
        <function-ref name="setContinuous" scoped="" ref="0x40674790"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40674870"/>
        <function-ref name="getValue" scoped="" ref="0x40674950"/>
        <function-ref name="dataReady" scoped="" ref="0x40674a30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40674c18" loc="60:/opt/tinyos-2.1.1/tos/chips/atm1281/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40674c18"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40674df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x406d7488" loc="82:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x406d7488"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x406d7670"/>
        <function-ref name="immediateRequested" scoped="" ref="0x406d7750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x406d63e8" loc="86:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x406d63e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x406d65d0"/>
        <function-ref name="configure" scoped="" ref="0x406d66b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x406d7890" loc="83:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x406d7890"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x406d7a68"/>
        <function-ref name="requested" scoped="" ref="0x406d7b48"/>
        <function-ref name="granted" scoped="" ref="0x406d7c28"/>
        <function-ref name="isOwner" scoped="" ref="0x406d7d08"/>
        <function-ref name="immediateRequested" scoped="" ref="0x406d7de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40675cf0" loc="81:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40675cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40675ed8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x406d7010"/>
        <function-ref name="request" scoped="" ref="0x406d70f0"/>
        <function-ref name="granted" scoped="" ref="0x406d71d0"/>
        <function-ref name="isOwner" scoped="" ref="0x406d72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x406d7f28" loc="84:/opt/tinyos-2.1.1/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x406d7f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x406d6110"/>
        <function-ref name="userId" scoped="" ref="0x406d61f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4091ee80" loc="34:/opt/tinyos-2.1.1/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4091ee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4091c070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x4091c1d0" loc="35:/opt/tinyos-2.1.1/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x4091c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x4091c3a8"/>
        <function-ref name="isEmpty" scoped="" ref="0x4091c488"/>
        <function-ref name="isEnqueued" scoped="" ref="0x4091c568"/>
        <function-ref name="dequeue" scoped="" ref="0x4091c648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x4091aa98" loc="55:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x4091aa98"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x4091ac80"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4091ad60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40919a40" loc="60:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40919a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40919c28"/>
        <function-ref name="configure" scoped="" ref="0x40919d08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40919e68" loc="61:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40919e68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40918050"/>
        <function-ref name="isEmpty" scoped="" ref="0x40918130"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40918210"/>
        <function-ref name="dequeue" scoped="" ref="0x409182f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x4091aea0" loc="56:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4091aea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x409190c0"/>
        <function-ref name="requested" scoped="" ref="0x409191a0"/>
        <function-ref name="granted" scoped="" ref="0x40919280"/>
        <function-ref name="isOwner" scoped="" ref="0x40919360"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40919440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40918430" loc="62:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40918430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40918608"/>
        <function-ref name="led0Toggle" scoped="" ref="0x409186e8"/>
        <function-ref name="led1On" scoped="" ref="0x409187c8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x409188a8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40918988"/>
        <function-ref name="get" scoped="" ref="0x40918a68"/>
        <function-ref name="led1Off" scoped="" ref="0x40918b48"/>
        <function-ref name="led0On" scoped="" ref="0x40918ec8"/>
        <function-ref name="set" scoped="" ref="0x40918d08"/>
        <function-ref name="led2On" scoped="" ref="0x40918c28"/>
        <function-ref name="led2Off" scoped="" ref="0x40918de8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4091a358" loc="54:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x4091a358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4091a540"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4091a620"/>
        <function-ref name="request" scoped="" ref="0x4091a700"/>
        <function-ref name="granted" scoped="" ref="0x4091a7e0"/>
        <function-ref name="isOwner" scoped="" ref="0x4091a8c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40919580" loc="57:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40919580"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40919758"/>
        <function-ref name="userId" scoped="" ref="0x40919838"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40917080" loc="75:/opt/tinyos-2.1.1/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40917080"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40917258"/>
        <function-ref name="runTask" scoped="" ref="0x40917338"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x406e7010" loc="62:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x406e7010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x406e71e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x406e7328" loc="63:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x406e7328"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x406e7500"/>
        <function-ref name="requested" scoped="" ref="0x406e75e0"/>
        <function-ref name="granted" scoped="" ref="0x406e76c0"/>
        <function-ref name="isOwner" scoped="" ref="0x406e77a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x406e7880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x406e8bb0" loc="60:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x406e8bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406e8d88"/>
        <function-ref name="stop" scoped="" ref="0x406e8e68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x406e79c0" loc="64:/opt/tinyos-2.1.1/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x406e79c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x406e7b98"/>
        <function-ref name="userId" scoped="" ref="0x406e7c78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40939970" loc="52:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40939970"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40939b48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40939c88" loc="53:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40939c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40939e60"/>
        <function-ref name="requested" scoped="" ref="0x40938010"/>
        <function-ref name="granted" scoped="" ref="0x409380f0"/>
        <function-ref name="isOwner" scoped="" ref="0x409381d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x409382b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x40939578" loc="50:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40939578"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40939750"/>
        <function-ref name="stop" scoped="" ref="0x40939830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x409383f0" loc="54:/opt/tinyos-2.1.1/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x409383f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x409385c8"/>
        <function-ref name="userId" scoped="" ref="0x409386a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x406ea3d8" loc="48:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x406ea3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406eaa00"/>
        <function-ref name="readDone" scoped="" ref="0x406eac58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x406fd390" loc="49:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x406fd390"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406fd9d8"/>
        <function-ref name="readDone" scoped="" ref="0x406fdc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x406fc8b8" loc="53:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x406fc8b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x406fca90"/>
        <function-ref name="getChannel" scoped="" ref="0x406fcb70"/>
        <function-ref name="getPrescaler" scoped="" ref="0x406fcc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x406fc040" loc="52:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x406fc040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x406fc218"/>
        <function-ref name="cancel" scoped="" ref="0x406fc2f8"/>
        <function-ref name="dataReady" scoped="" ref="0x406fc3d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x40706010" loc="103:/opt/tinyos-2.1.1/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x40706010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x407061e8"/>
        <function-ref name="runTask" scoped="" ref="0x407062c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x406eb750" loc="24:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x406eb750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406ebd88"/>
        <function-ref name="readDone" scoped="" ref="0x40712010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40712470" loc="26:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x40712470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40712aa8"/>
        <function-ref name="readDone" scoped="" ref="0x40712d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x407190a8" loc="27:/opt/tinyos-2.1.1/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x407190a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40719290"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40719370"/>
        <function-ref name="request" scoped="" ref="0x40719450"/>
        <function-ref name="granted" scoped="" ref="0x40719530"/>
        <function-ref name="isOwner" scoped="" ref="0x40719610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x40715638" loc="30:/opt/tinyos-2.1.1/tos/platforms/mica/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40715638"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40715810"/>
        <function-ref name="getChannel" scoped="" ref="0x407158f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x407159d0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.1.1/tos/interfaces/Boot.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x403f75f8" loc="49:/opt/tinyos-2.1.1/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.1.1/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x404019f0" loc="49:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x404019f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x40401ea0" loc="55:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x4040c6b8" loc="63:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x404019f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x4040c388" loc="63:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x4040c558" loc="63:/opt/tinyos-2.1.1/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x404019f0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
      <documentation loc="22:/opt/tinyos-2.1.1/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x403fcda8" loc="50:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x403fb210" loc="56:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x403fb690" loc="61:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x403fbf00" loc="72:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x403fac20" loc="89:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x404030f8" loc="106:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x403fbab8" loc="66:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40403838" loc="123:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x404036e0" loc="123:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x403fc980" loc="45:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x403fa3b0" loc="78:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x403fa7d8" loc="83:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.1.1/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x403f6e68" loc="42:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x403f6e68"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40407630" loc="125:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x403ff438" loc="72:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x40408610" loc="103:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x404082c8" loc="103:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x404084b0" loc="103:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x403ffd88" loc="87:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x40405010" loc="140:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x40407a78" loc="133:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x403ff8c8" loc="81:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x404004d0" loc="53:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40400378" loc="53:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x40407010" loc="118:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40408cb0" loc="118:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x40408e98" loc="118:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x40400b68" loc="62:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40400a10" loc="62:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x403ff070" loc="67:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.1.1/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.1.1/tos/interfaces/Init.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x40410758" loc="51:/opt/tinyos-2.1.1/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.1.1/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x4041c168" loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x4041c010" loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x40416768" loc="31:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x40416da0" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40416c48" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x40413488" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40413330" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x404139e0" loc="53:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x40423138" loc="33:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x40423520" loc="34:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x40424990" loc="31:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x40423cf0" loc="36:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40424d50" loc="32:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x404238f8" loc="35:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40424250" loc="29:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x404245e0" loc="30:/opt/tinyos-2.1.1/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4034e390" loc="46:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x4034ec98" loc="61:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x4034e7d0" loc="54:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x4034fb68" loc="56:/opt/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x40354090" loc="64:/opt/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.1.1/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/opt/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
      <documentation loc="46:/opt/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x403d8138" loc="59:/opt/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/opt/tinyos-2.1.1/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/opt/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="1:/opt/tinyos-2.1.1/tos/platforms/micaz/hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id: hardware.h,v 1.7 2009/07/01 19:27:00 scipio Exp $&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x403e7b28" loc="54:/opt/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/opt/tinyos-2.1.1/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x4038dd78"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/opt/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
      <documentation loc="27:/opt/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x403e2680" loc="44:/opt/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/opt/tinyos-2.1.1/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.1.1/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40534f18" loc="42:/opt/tinyos-2.1.1/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40534f18"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x4053e410" loc="50:/opt/tinyos-2.1.1/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.1.1/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4003a848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4053a608" loc="46:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4053a608"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4053a770" loc="46:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053a770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x4053ac58" loc="53:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053a770"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x405406a8" loc="65:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x405401a8" loc="60:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40540aa8" loc="71:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.1.1/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4053c7c8" loc="45:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4053c7c8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4053c930" loc="45:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40538c78" loc="98:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40539950" loc="67:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40538630" loc="92:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x405382e0" loc="92:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          </variable>
          <variable name="dt" ref="0x405384d0" loc="92:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40539dc0" loc="77:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40544138" loc="105:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40539010" loc="55:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x4053ce08" loc="55:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4053c930"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x405394f0" loc="62:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.1.1/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="56:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="47:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x4055ec40" loc="69:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="68:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x4055e210" loc="65:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="64:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlA" ref="0x40554de8" loc="59:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="58:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x4055e7d0" loc="66:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x4055e678" loc="66:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlB" ref="0x4055fd70" loc="62:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x4055fc18" loc="62:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x4055c218" loc="70:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x4055c0c0" loc="70:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControlB" ref="0x4055f280" loc="60:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlA" ref="0x4055f7f8" loc="61:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x4055f6a0" loc="61:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerCtrl8.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="40:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
      <documentation loc="34:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <short>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega1281 8-bit asynchronous timer control registers&#10;&#10; @author David Gay&#10; @author Janos Sallai &#60;janos.sallai@vanderbilt.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="compareBBusy" ref="0x405628a0" loc="81:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="77:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2B is busy (should not be updated if true)&#10; @return TRUE if OCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer2Asynchronous" ref="0x40563568" loc="57:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="54:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 2 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlABusy" ref="0x40563990" loc="63:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="59:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2A is busy (should not be updated if true)&#10; @return TRUE if TCCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="controlBBusy" ref="0x40563e70" loc="69:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="65:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR2B is busy (should not be updated if true)&#10; @return TRUE if TCCR2B is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x40562d60" loc="87:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="83:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT2) is busy (should not be updated if true)&#10; @return TRUE if TCNT2 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareABusy" ref="0x405623c0" loc="75:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="71:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR2A is busy (should not be updated if true)&#10; @return TRUE if OCR2A is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x40566a70" loc="46:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="42:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer2 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b8d68"/>
            <typename><typedef-ref name="Atm128_ASSR_t" ref="0x403b7010"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x40563088" loc="52:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer2 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer2 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b8d68"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x403b7010"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x40566f10" loc="52:/opt/tinyos-2.1.1/tos/chips/atm1281/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403b8d68"/>
              <typename><typedef-ref name="Atm128_ASSR_t" ref="0x403b7010"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x4055b220" loc="32:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4055b220"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x40567138" loc="65:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x405680f8" loc="49:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4055b718" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4055b220"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40568500" loc="53:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40567598" loc="71:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4055bca0" loc="45:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4055b220"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x4055bb48" loc="45:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4055b220"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40568908" loc="56:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40568d00" loc="59:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x4054eee8" loc="46:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4054eee8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x405566b8" loc="89:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40557e00" loc="78:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x405593f8" loc="52:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4054eee8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x40556c48" loc="95:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40556af0" loc="95:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x405550f8" loc="101:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x405571d8" loc="66:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x40559da0" loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40556290" loc="84:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40559970" loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4054eee8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40559818" loc="58:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4054eee8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x405575e0" loc="69:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x405579d8" loc="72:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.1.1/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/opt/tinyos-2.1.1/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x4062bef0" loc="55:/opt/tinyos-2.1.1/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/opt/tinyos-2.1.1/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x4062ba30" loc="49:/opt/tinyos-2.1.1/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/opt/tinyos-2.1.1/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x4063b508" loc="32:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x4063b010" loc="25:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x4063b9f8" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008/06/16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40635010" loc="52:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40635010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x406354e0" loc="58:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x40635cb0" loc="66:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40635010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40635980" loc="66:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40635b50" loc="66:/opt/tinyos-2.1.1/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40635010"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
      <documentation loc="53:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2007/04/15 20:05:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x40643e58" loc="110:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="94:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x40643538" loc="87:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="80:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x40636f28" loc="78:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="68:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x406439e8" loc="92:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="89:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x406425f0" loc="118:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
        <documentation loc="112:/opt/tinyos-2.1.1/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="68:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x4064b070" loc="91:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="70:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x4064c860" loc="91:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x4064ca88" loc="91:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x4064ccb0" loc="92:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x4064ced0" loc="92:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x4064a3f0" loc="110:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="94:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x4064b990" loc="110:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x4064bb80" loc="110:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x4064bd88" loc="110:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x4064a010" loc="111:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x4064a278" loc="111:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="43:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="33:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x4064e1d8" loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="45:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x4063f9b8" loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x4063fbe0" loc="61:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x4063fe08" loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x4064e068" loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x4064d250" loc="82:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="74:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x4064ec88" loc="72:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="64:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x4064e938" loc="72:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x4064eb28" loc="72:/opt/tinyos-2.1.1/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="39:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="27:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x406501a8" loc="105:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="102:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x40646898" loc="44:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="40:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4039d8f0"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x4039db78"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x4064f6b8" loc="131:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="126:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x4064f560" loc="131:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x40650668" loc="113:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="109:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x40653360" loc="73:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="70:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x40646eb0" loc="49:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="45:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4039d8f0"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x4039db78"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x40646d58" loc="49:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4039d8f0"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x4039db78"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x40653bb0" loc="82:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x4064f010" loc="124:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="119:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x4064fb60" loc="141:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="133:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x40653760" loc="77:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="74:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x40651468" loc="90:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="87:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x40651038" loc="86:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x406518a0" loc="97:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x40650ad8" loc="118:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="114:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x40654a18" loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="56:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x403a3bc8"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403a9010"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x406548c0" loc="60:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x403a3bc8"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403a9010"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x40651d68" loc="101:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="98:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x406543e8" loc="55:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="51:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x403a3bc8"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403a9010"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x40654ec8" loc="66:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="62:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x406602c8" loc="147:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="143:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40660170" loc="147:/opt/tinyos-2.1.1/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4003a1e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/opt/tinyos-2.1.1/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.1/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x406479e8" loc="74:/opt/tinyos-2.1.1/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/opt/tinyos-2.1.1/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40647ed0" loc="84:/opt/tinyos-2.1.1/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/opt/tinyos-2.1.1/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/opt/tinyos-2.1.1/tos/interfaces/ResourceRequested.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.4 $&#10; @date $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x40690d28" loc="43:/opt/tinyos-2.1.1/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/opt/tinyos-2.1.1/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x406a1328" loc="51:/opt/tinyos-2.1.1/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/opt/tinyos-2.1.1/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007/02/04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x4069ea28" loc="56:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x4069d4e8" loc="73:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x4069e4f8" loc="46:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x4069d010" loc="65:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x4069dac0" loc="81:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.1.1/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/opt/tinyos-2.1.1/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="59:/opt/tinyos-2.1.1/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x406a2d10" loc="80:/opt/tinyos-2.1.1/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/opt/tinyos-2.1.1/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x4069b250" loc="88:/opt/tinyos-2.1.1/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/opt/tinyos-2.1.1/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40039b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
      <documentation loc="23:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2009/04/15 03:01:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x406a8168" loc="69:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40351628"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4069fa58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x406a8010" loc="69:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4069fa58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x406add48" loc="43:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x406a9468" loc="52:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x403476e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4069fa58"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x406a9310" loc="52:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x4069fa58"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x406a9a18" loc="60:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/opt/tinyos-2.1.1/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x4069fa58"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="45:/opt/tinyos-2.1.1/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="31:/opt/tinyos-2.1.1/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x406e6850" loc="52:/opt/tinyos-2.1.1/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="46:/opt/tinyos-2.1.1/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
