#include <Timer.h>
#include "BlinkToRadio.h"

module BlinkToRadioC {
	uses interface Boot;
	uses interface Leds;
	uses interface Timer<TMilli> as Timer0;	
	uses interface Packet;
	uses interface AMPacket;
	uses interface AMSend;
	uses interface SplitControl as AMControl;
	uses interface Receive;
}

implementation {
	uint16_t counter = 1;
	uint16_t prevCounter = 0;
	uint16_t droppedPackets = 0;
	bool busy = FALSE;
	message_t pkt;
	
	event void Boot.booted() {
		call AMControl.start();
		
	}
	
	event void AMControl.startDone(error_t err)
	{
		if (err == SUCCESS) {
			call Timer0.startPeriodic(TIMER_PERIOD_MILLI);
			call Leds.set(1);
		}
		else {
			call AMControl.start();
		}
	}
	
	event void AMSend.sendDone(message_t* msg, error_t err)
	{
		if(&pkt == msg) {
			busy = FALSE;
		}
	}
	
	event void AMControl.stopDone(error_t err) {
		
	}
	
	event message_t* Receive.receive(message_t* msg, void* payload, uint8_t len) {
		if(len == sizeof(BlinkToRadioMsg) ) {
			BlinkToRadioMsg* btrpkt = (BlinkToRadioMsg*)payload;
			
			if(btrpkt->txnodeid == TOS_NODE_ID) {
				call Leds.set(btrpkt->counter);
			}
		}
		return msg;		
	}
		
	event void Timer0.fired() {
		//call Leds.set(counter);
		if(!busy) {
			BlinkToRadioMsg* btrpkt = (BlinkToRadioMsg*) (call Packet.getPayload(&pkt, NULL));
			btrpkt->nodeid = TOS_NODE_ID;
			btrpkt->txnodeid = ((TOS_NODE_ID % 3) + 1);
			btrpkt->counter = counter++;
			if(call AMSend.send(AM_BROADCAST_ADDR, &pkt, sizeof(BlinkToRadioMsg)) == SUCCESS) {
				busy = TRUE;
			}
		}
	}
}
